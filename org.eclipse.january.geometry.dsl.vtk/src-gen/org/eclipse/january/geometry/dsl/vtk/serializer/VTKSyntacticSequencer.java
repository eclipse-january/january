/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.january.geometry.dsl.vtk.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.january.geometry.dsl.vtk.services.VTKGrammarAccess;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class VTKSyntacticSequencer extends AbstractSyntacticSequencer {

	protected VTKGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Face_ENDLINETerminalRuleCall_3_q;
	protected AbstractElementAlias match_Geometry_NodesPolyShapeParserRuleCall_2_2_1_0;
	protected AbstractElementAlias match_Geometry_NodesTriangleStripPolyShapeParserRuleCall_2_3_1_0;
	protected AbstractElementAlias match_Geometry___ENDLINETerminalRuleCall_2_0_q___POLYGONSKeyword_2_2_0_0_INTTerminalRuleCall_2_2_0_1_INTTerminalRuleCall_2_2_0_2_ENDLINETerminalRuleCall_2_2_0_3_q__q___TRIANGLE_STRIPSKeyword_2_3_0_0_INTTerminalRuleCall_2_3_0_1_INTTerminalRuleCall_2_3_0_2_ENDLINETerminalRuleCall_2_3_0_3_q__q__p;
	protected AbstractElementAlias match_VertexSource___POINTSKeyword_1_0_EStringParserRuleCall_1_1_q_ENDLINETerminalRuleCall_1_2_q__q;
	protected AbstractElementAlias match_Vertex_EIntParserRuleCall_4_q;
	protected AbstractElementAlias match_Vertex_ENDLINETerminalRuleCall_5_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (VTKGrammarAccess) access;
		match_Face_ENDLINETerminalRuleCall_3_q = new TokenAlias(false, true, grammarAccess.getFaceAccess().getENDLINETerminalRuleCall_3());
		match_Geometry_NodesPolyShapeParserRuleCall_2_2_1_0 = new TokenAlias(false, false, grammarAccess.getGeometryAccess().getNodesPolyShapeParserRuleCall_2_2_1_0());
		match_Geometry_NodesTriangleStripPolyShapeParserRuleCall_2_3_1_0 = new TokenAlias(false, false, grammarAccess.getGeometryAccess().getNodesTriangleStripPolyShapeParserRuleCall_2_3_1_0());
		match_Geometry___ENDLINETerminalRuleCall_2_0_q___POLYGONSKeyword_2_2_0_0_INTTerminalRuleCall_2_2_0_1_INTTerminalRuleCall_2_2_0_2_ENDLINETerminalRuleCall_2_2_0_3_q__q___TRIANGLE_STRIPSKeyword_2_3_0_0_INTTerminalRuleCall_2_3_0_1_INTTerminalRuleCall_2_3_0_2_ENDLINETerminalRuleCall_2_3_0_3_q__q__p = new GroupAlias(true, false, new TokenAlias(false, true, grammarAccess.getGeometryAccess().getENDLINETerminalRuleCall_2_0()), new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getGeometryAccess().getPOLYGONSKeyword_2_2_0_0()), new TokenAlias(false, false, grammarAccess.getGeometryAccess().getINTTerminalRuleCall_2_2_0_1()), new TokenAlias(false, false, grammarAccess.getGeometryAccess().getINTTerminalRuleCall_2_2_0_2()), new TokenAlias(false, true, grammarAccess.getGeometryAccess().getENDLINETerminalRuleCall_2_2_0_3())), new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getGeometryAccess().getTRIANGLE_STRIPSKeyword_2_3_0_0()), new TokenAlias(false, false, grammarAccess.getGeometryAccess().getINTTerminalRuleCall_2_3_0_1()), new TokenAlias(false, false, grammarAccess.getGeometryAccess().getINTTerminalRuleCall_2_3_0_2()), new TokenAlias(false, true, grammarAccess.getGeometryAccess().getENDLINETerminalRuleCall_2_3_0_3())));
		match_VertexSource___POINTSKeyword_1_0_EStringParserRuleCall_1_1_q_ENDLINETerminalRuleCall_1_2_q__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getVertexSourceAccess().getPOINTSKeyword_1_0()), new TokenAlias(false, true, grammarAccess.getVertexSourceAccess().getEStringParserRuleCall_1_1()), new TokenAlias(false, true, grammarAccess.getVertexSourceAccess().getENDLINETerminalRuleCall_1_2()));
		match_Vertex_EIntParserRuleCall_4_q = new TokenAlias(false, true, grammarAccess.getVertexAccess().getEIntParserRuleCall_4());
		match_Vertex_ENDLINETerminalRuleCall_5_q = new TokenAlias(false, true, grammarAccess.getVertexAccess().getENDLINETerminalRuleCall_5());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getEIntRule())
			return getEIntToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getENDLINERule())
			return getENDLINEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getEStringRule())
			return getEStringToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * EInt returns ecore::EInt:
	 * 	'-'? INT
	 * ;
	 */
	protected String getEIntToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal ENDLINE: ('\r'? '\n' | '\r');
	 */
	protected String getENDLINEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\n";
	}
	
	/**
	 * EString returns ecore::EString:
	 * 	(STRING | ID | INT | '.' | '/' | '\\' | ':' | '_' | '-' )+
	 * ;
	 */
	protected String getEStringToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	/**
	 * terminal INT returns ecore::EInt: ('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Face_ENDLINETerminalRuleCall_3_q.equals(syntax))
				emit_Face_ENDLINETerminalRuleCall_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Geometry_NodesPolyShapeParserRuleCall_2_2_1_0.equals(syntax))
				emit_Geometry_NodesPolyShapeParserRuleCall_2_2_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Geometry_NodesTriangleStripPolyShapeParserRuleCall_2_3_1_0.equals(syntax))
				emit_Geometry_NodesTriangleStripPolyShapeParserRuleCall_2_3_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Geometry___ENDLINETerminalRuleCall_2_0_q___POLYGONSKeyword_2_2_0_0_INTTerminalRuleCall_2_2_0_1_INTTerminalRuleCall_2_2_0_2_ENDLINETerminalRuleCall_2_2_0_3_q__q___TRIANGLE_STRIPSKeyword_2_3_0_0_INTTerminalRuleCall_2_3_0_1_INTTerminalRuleCall_2_3_0_2_ENDLINETerminalRuleCall_2_3_0_3_q__q__p.equals(syntax))
				emit_Geometry___ENDLINETerminalRuleCall_2_0_q___POLYGONSKeyword_2_2_0_0_INTTerminalRuleCall_2_2_0_1_INTTerminalRuleCall_2_2_0_2_ENDLINETerminalRuleCall_2_2_0_3_q__q___TRIANGLE_STRIPSKeyword_2_3_0_0_INTTerminalRuleCall_2_3_0_1_INTTerminalRuleCall_2_3_0_2_ENDLINETerminalRuleCall_2_3_0_3_q__q__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_VertexSource___POINTSKeyword_1_0_EStringParserRuleCall_1_1_q_ENDLINETerminalRuleCall_1_2_q__q.equals(syntax))
				emit_VertexSource___POINTSKeyword_1_0_EStringParserRuleCall_1_1_q_ENDLINETerminalRuleCall_1_2_q__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Vertex_EIntParserRuleCall_4_q.equals(syntax))
				emit_Vertex_EIntParserRuleCall_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Vertex_ENDLINETerminalRuleCall_5_q.equals(syntax))
				emit_Vertex_ENDLINETerminalRuleCall_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ENDLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     vertexIndices+=EInt (ambiguity) (rule end)
	 */
	protected void emit_Face_ENDLINETerminalRuleCall_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     nodes+=PolyShape
	 *
	 * This ambiguous syntax occurs at:
	 *     (ambiguity)
	 */
	protected void emit_Geometry_NodesPolyShapeParserRuleCall_2_2_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     nodes+=TriangleStripPolyShape
	 *
	 * This ambiguous syntax occurs at:
	 *     (ambiguity)
	 */
	protected void emit_Geometry_NodesTriangleStripPolyShapeParserRuleCall_2_3_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (ENDLINE? ('POLYGONS' INT INT ENDLINE?)? ('TRIANGLE_STRIPS' INT INT ENDLINE?)?)+
	 *
	 * This ambiguous syntax occurs at:
	 *     name=EString (ambiguity)
	 *     name=EString (ambiguity) (rule end)
	 *     name=EString (ambiguity) vertexSources+=VertexSource
	 *     nodes+=PolyShape (ambiguity)
	 *     nodes+=PolyShape (ambiguity) (rule end)
	 *     nodes+=PolyShape (ambiguity) vertexSources+=VertexSource
	 *     nodes+=TriangleStripPolyShape (ambiguity)
	 *     nodes+=TriangleStripPolyShape (ambiguity) (rule end)
	 *     nodes+=TriangleStripPolyShape (ambiguity) vertexSources+=VertexSource
	 *     vertexSources+=VertexSource (ambiguity)
	 *     vertexSources+=VertexSource (ambiguity) (rule end)
	 *     vertexSources+=VertexSource (ambiguity) vertexSources+=VertexSource
	 */
	protected void emit_Geometry___ENDLINETerminalRuleCall_2_0_q___POLYGONSKeyword_2_2_0_0_INTTerminalRuleCall_2_2_0_1_INTTerminalRuleCall_2_2_0_2_ENDLINETerminalRuleCall_2_2_0_3_q__q___TRIANGLE_STRIPSKeyword_2_3_0_0_INTTerminalRuleCall_2_3_0_1_INTTerminalRuleCall_2_3_0_2_ENDLINETerminalRuleCall_2_3_0_3_q__q__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('POINTS' EString? ENDLINE?)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) vertices+=Vertex
	 */
	protected void emit_VertexSource___POINTSKeyword_1_0_EStringParserRuleCall_1_1_q_ENDLINETerminalRuleCall_1_2_q__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     EInt?
	 *
	 * This ambiguous syntax occurs at:
	 *     z=EDouble (ambiguity) ENDLINE? (rule end)
	 */
	protected void emit_Vertex_EIntParserRuleCall_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ENDLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     z=EDouble EInt? (ambiguity) (rule end)
	 */
	protected void emit_Vertex_ENDLINETerminalRuleCall_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
