/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.january.geometry.dsl.vtk.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class VTKGrammarAccess extends AbstractGrammarElementFinder {
	
	public class GeometryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.dsl.vtk.VTK.Geometry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGeometryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cENDLINETerminalRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final Assignment cVertexSourcesAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cVertexSourcesVertexSourceParserRuleCall_2_1_0 = (RuleCall)cVertexSourcesAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cAlternatives_2.eContents().get(2);
		private final Group cGroup_2_2_0 = (Group)cGroup_2_2.eContents().get(0);
		private final Keyword cPOLYGONSKeyword_2_2_0_0 = (Keyword)cGroup_2_2_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_2_0_1 = (RuleCall)cGroup_2_2_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2_2_0_2 = (RuleCall)cGroup_2_2_0.eContents().get(2);
		private final RuleCall cENDLINETerminalRuleCall_2_2_0_3 = (RuleCall)cGroup_2_2_0.eContents().get(3);
		private final Assignment cNodesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cNodesPolyShapeParserRuleCall_2_2_1_0 = (RuleCall)cNodesAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cAlternatives_2.eContents().get(3);
		private final Group cGroup_2_3_0 = (Group)cGroup_2_3.eContents().get(0);
		private final Keyword cTRIANGLE_STRIPSKeyword_2_3_0_0 = (Keyword)cGroup_2_3_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_3_0_1 = (RuleCall)cGroup_2_3_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2_3_0_2 = (RuleCall)cGroup_2_3_0.eContents().get(2);
		private final RuleCall cENDLINETerminalRuleCall_2_3_0_3 = (RuleCall)cGroup_2_3_0.eContents().get(3);
		private final Assignment cNodesAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cNodesTriangleStripPolyShapeParserRuleCall_2_3_1_0 = (RuleCall)cNodesAssignment_2_3_1.eContents().get(0);
		
		//Geometry:
		//	{Geometry} name=EString (ENDLINE | vertexSources+=VertexSource | ('POLYGONS' INT INT ENDLINE?) nodes+=PolyShape* |
		//	('TRIANGLE_STRIPS' INT INT ENDLINE?) nodes+=TriangleStripPolyShape*)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Geometry} name=EString (ENDLINE | vertexSources+=VertexSource | ('POLYGONS' INT INT ENDLINE?) nodes+=PolyShape* |
		//('TRIANGLE_STRIPS' INT INT ENDLINE?) nodes+=TriangleStripPolyShape*)*
		public Group getGroup() { return cGroup; }
		
		//{Geometry}
		public Action getGeometryAction_0() { return cGeometryAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//(ENDLINE | vertexSources+=VertexSource | ('POLYGONS' INT INT ENDLINE?) nodes+=PolyShape* | ('TRIANGLE_STRIPS' INT INT
		//ENDLINE?) nodes+=TriangleStripPolyShape*)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//ENDLINE
		public RuleCall getENDLINETerminalRuleCall_2_0() { return cENDLINETerminalRuleCall_2_0; }
		
		//vertexSources+=VertexSource
		public Assignment getVertexSourcesAssignment_2_1() { return cVertexSourcesAssignment_2_1; }
		
		//VertexSource
		public RuleCall getVertexSourcesVertexSourceParserRuleCall_2_1_0() { return cVertexSourcesVertexSourceParserRuleCall_2_1_0; }
		
		//('POLYGONS' INT INT ENDLINE?) nodes+=PolyShape*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//('POLYGONS' INT INT ENDLINE?)
		public Group getGroup_2_2_0() { return cGroup_2_2_0; }
		
		//'POLYGONS'
		public Keyword getPOLYGONSKeyword_2_2_0_0() { return cPOLYGONSKeyword_2_2_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_2_0_1() { return cINTTerminalRuleCall_2_2_0_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_2_0_2() { return cINTTerminalRuleCall_2_2_0_2; }
		
		//ENDLINE?
		public RuleCall getENDLINETerminalRuleCall_2_2_0_3() { return cENDLINETerminalRuleCall_2_2_0_3; }
		
		//nodes+=PolyShape*
		public Assignment getNodesAssignment_2_2_1() { return cNodesAssignment_2_2_1; }
		
		//PolyShape
		public RuleCall getNodesPolyShapeParserRuleCall_2_2_1_0() { return cNodesPolyShapeParserRuleCall_2_2_1_0; }
		
		//('TRIANGLE_STRIPS' INT INT ENDLINE?) nodes+=TriangleStripPolyShape*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//('TRIANGLE_STRIPS' INT INT ENDLINE?)
		public Group getGroup_2_3_0() { return cGroup_2_3_0; }
		
		//'TRIANGLE_STRIPS'
		public Keyword getTRIANGLE_STRIPSKeyword_2_3_0_0() { return cTRIANGLE_STRIPSKeyword_2_3_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_3_0_1() { return cINTTerminalRuleCall_2_3_0_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_3_0_2() { return cINTTerminalRuleCall_2_3_0_2; }
		
		//ENDLINE?
		public RuleCall getENDLINETerminalRuleCall_2_3_0_3() { return cENDLINETerminalRuleCall_2_3_0_3; }
		
		//nodes+=TriangleStripPolyShape*
		public Assignment getNodesAssignment_2_3_1() { return cNodesAssignment_2_3_1; }
		
		//TriangleStripPolyShape
		public RuleCall getNodesTriangleStripPolyShapeParserRuleCall_2_3_1_0() { return cNodesTriangleStripPolyShapeParserRuleCall_2_3_1_0; }
	}
	public class VertexSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.dsl.vtk.VTK.VertexSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVertexSourceAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPOINTSKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cEStringParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cENDLINETerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cVerticesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVerticesVertexParserRuleCall_2_0 = (RuleCall)cVerticesAssignment_2.eContents().get(0);
		
		//VertexSource:
		//	{VertexSource} ('POINTS' EString? ENDLINE?)? vertices+=Vertex+;
		@Override public ParserRule getRule() { return rule; }
		
		//{VertexSource} ('POINTS' EString? ENDLINE?)? vertices+=Vertex+
		public Group getGroup() { return cGroup; }
		
		//{VertexSource}
		public Action getVertexSourceAction_0() { return cVertexSourceAction_0; }
		
		//('POINTS' EString? ENDLINE?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'POINTS'
		public Keyword getPOINTSKeyword_1_0() { return cPOINTSKeyword_1_0; }
		
		//EString?
		public RuleCall getEStringParserRuleCall_1_1() { return cEStringParserRuleCall_1_1; }
		
		//ENDLINE?
		public RuleCall getENDLINETerminalRuleCall_1_2() { return cENDLINETerminalRuleCall_1_2; }
		
		//vertices+=Vertex+
		public Assignment getVerticesAssignment_2() { return cVerticesAssignment_2; }
		
		//Vertex
		public RuleCall getVerticesVertexParserRuleCall_2_0() { return cVerticesVertexParserRuleCall_2_0; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.dsl.vtk.VTK.EDouble");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDOUBLETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEIntParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EDouble ecore::EDouble:
		//	DOUBLE | EInt
		@Override public ParserRule getRule() { return rule; }
		
		//DOUBLE | EInt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_0() { return cDOUBLETerminalRuleCall_0; }
		
		//EInt
		public RuleCall getEIntParserRuleCall_1() { return cEIntParserRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.dsl.vtk.VTK.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.dsl.vtk.VTK.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cFullStopKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSolidusKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cReverseSolidusKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword c_Keyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cHyphenMinusKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//EString:
		//	(STRING | ID | INT | '.' | '/' | '\\' | ':' | '_' | '-')+;
		@Override public ParserRule getRule() { return rule; }
		
		//(STRING | ID | INT | '.' | '/' | '\\' | ':' | '_' | '-')+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//'/'
		public Keyword getSolidusKeyword_4() { return cSolidusKeyword_4; }
		
		//'\\'
		public Keyword getReverseSolidusKeyword_5() { return cReverseSolidusKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//'_'
		public Keyword get_Keyword_7() { return c_Keyword_7; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_8() { return cHyphenMinusKeyword_8; }
	}
	public class FaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.dsl.vtk.VTK.Face");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFaceAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cEIntParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVertexIndicesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVertexIndicesEIntParserRuleCall_2_0 = (RuleCall)cVertexIndicesAssignment_2.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Face:
		//	{Face} EInt vertexIndices+=EInt+ ENDLINE?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Face} EInt vertexIndices+=EInt+ ENDLINE?
		public Group getGroup() { return cGroup; }
		
		//{Face}
		public Action getFaceAction_0() { return cFaceAction_0; }
		
		//EInt
		public RuleCall getEIntParserRuleCall_1() { return cEIntParserRuleCall_1; }
		
		//vertexIndices+=EInt+
		public Assignment getVertexIndicesAssignment_2() { return cVertexIndicesAssignment_2; }
		
		//EInt
		public RuleCall getVertexIndicesEIntParserRuleCall_2_0() { return cVertexIndicesEIntParserRuleCall_2_0; }
		
		//ENDLINE?
		public RuleCall getENDLINETerminalRuleCall_3() { return cENDLINETerminalRuleCall_3; }
	}
	public class PolyShapeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.dsl.vtk.VTK.PolyShape");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPolyShapeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFacesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFacesFaceParserRuleCall_1_0 = (RuleCall)cFacesAssignment_1.eContents().get(0);
		
		//PolyShape:
		//	{PolyShape} faces+=Face+;
		@Override public ParserRule getRule() { return rule; }
		
		//{PolyShape} faces+=Face+
		public Group getGroup() { return cGroup; }
		
		//{PolyShape}
		public Action getPolyShapeAction_0() { return cPolyShapeAction_0; }
		
		//faces+=Face+
		public Assignment getFacesAssignment_1() { return cFacesAssignment_1; }
		
		//Face
		public RuleCall getFacesFaceParserRuleCall_1_0() { return cFacesFaceParserRuleCall_1_0; }
	}
	public class TriangleStripPolyShapeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.dsl.vtk.VTK.TriangleStripPolyShape");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTriangleStripPolyShapeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFacesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFacesFaceParserRuleCall_1_0 = (RuleCall)cFacesAssignment_1.eContents().get(0);
		
		//TriangleStripPolyShape:
		//	{TriangleStripPolyShape} faces+=Face+;
		@Override public ParserRule getRule() { return rule; }
		
		//{TriangleStripPolyShape} faces+=Face+
		public Group getGroup() { return cGroup; }
		
		//{TriangleStripPolyShape}
		public Action getTriangleStripPolyShapeAction_0() { return cTriangleStripPolyShapeAction_0; }
		
		//faces+=Face+
		public Assignment getFacesAssignment_1() { return cFacesAssignment_1; }
		
		//Face
		public RuleCall getFacesFaceParserRuleCall_1_0() { return cFacesFaceParserRuleCall_1_0; }
	}
	public class VertexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.dsl.vtk.VTK.Vertex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVertexAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXEDoubleParserRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		private final Assignment cYAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cYEDoubleParserRuleCall_2_0 = (RuleCall)cYAssignment_2.eContents().get(0);
		private final Assignment cZAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cZEDoubleParserRuleCall_3_0 = (RuleCall)cZAssignment_3.eContents().get(0);
		private final RuleCall cEIntParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cENDLINETerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Vertex:
		//	{Vertex} x=EDouble y=EDouble z=EDouble EInt? ENDLINE?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Vertex} x=EDouble y=EDouble z=EDouble EInt? ENDLINE?
		public Group getGroup() { return cGroup; }
		
		//{Vertex}
		public Action getVertexAction_0() { return cVertexAction_0; }
		
		//x=EDouble
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//EDouble
		public RuleCall getXEDoubleParserRuleCall_1_0() { return cXEDoubleParserRuleCall_1_0; }
		
		//y=EDouble
		public Assignment getYAssignment_2() { return cYAssignment_2; }
		
		//EDouble
		public RuleCall getYEDoubleParserRuleCall_2_0() { return cYEDoubleParserRuleCall_2_0; }
		
		//z=EDouble
		public Assignment getZAssignment_3() { return cZAssignment_3; }
		
		//EDouble
		public RuleCall getZEDoubleParserRuleCall_3_0() { return cZEDoubleParserRuleCall_3_0; }
		
		//EInt?
		public RuleCall getEIntParserRuleCall_4() { return cEIntParserRuleCall_4; }
		
		//ENDLINE?
		public RuleCall getENDLINETerminalRuleCall_5() { return cENDLINETerminalRuleCall_5; }
	}
	
	
	private final GeometryElements pGeometry;
	private final VertexSourceElements pVertexSource;
	private final EDoubleElements pEDouble;
	private final EIntElements pEInt;
	private final EStringElements pEString;
	private final FaceElements pFace;
	private final PolyShapeElements pPolyShape;
	private final TriangleStripPolyShapeElements pTriangleStripPolyShape;
	private final VertexElements pVertex;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tENDLINE;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VTKGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGeometry = new GeometryElements();
		this.pVertexSource = new VertexSourceElements();
		this.pEDouble = new EDoubleElements();
		this.pEInt = new EIntElements();
		this.pEString = new EStringElements();
		this.pFace = new FaceElements();
		this.pPolyShape = new PolyShapeElements();
		this.pTriangleStripPolyShape = new TriangleStripPolyShapeElements();
		this.pVertex = new VertexElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.dsl.vtk.VTK.DOUBLE");
		this.tENDLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.dsl.vtk.VTK.ENDLINE");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.dsl.vtk.VTK.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.dsl.vtk.VTK.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.january.geometry.dsl.vtk.VTK".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Geometry:
	//	{Geometry} name=EString (ENDLINE | vertexSources+=VertexSource | ('POLYGONS' INT INT ENDLINE?) nodes+=PolyShape* |
	//	('TRIANGLE_STRIPS' INT INT ENDLINE?) nodes+=TriangleStripPolyShape*)*;
	public GeometryElements getGeometryAccess() {
		return pGeometry;
	}
	
	public ParserRule getGeometryRule() {
		return getGeometryAccess().getRule();
	}
	
	//VertexSource:
	//	{VertexSource} ('POINTS' EString? ENDLINE?)? vertices+=Vertex+;
	public VertexSourceElements getVertexSourceAccess() {
		return pVertexSource;
	}
	
	public ParserRule getVertexSourceRule() {
		return getVertexSourceAccess().getRule();
	}
	
	//EDouble ecore::EDouble:
	//	DOUBLE | EInt
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EString:
	//	(STRING | ID | INT | '.' | '/' | '\\' | ':' | '_' | '-')+;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Face:
	//	{Face} EInt vertexIndices+=EInt+ ENDLINE?;
	public FaceElements getFaceAccess() {
		return pFace;
	}
	
	public ParserRule getFaceRule() {
		return getFaceAccess().getRule();
	}
	
	//PolyShape:
	//	{PolyShape} faces+=Face+;
	public PolyShapeElements getPolyShapeAccess() {
		return pPolyShape;
	}
	
	public ParserRule getPolyShapeRule() {
		return getPolyShapeAccess().getRule();
	}
	
	//TriangleStripPolyShape:
	//	{TriangleStripPolyShape} faces+=Face+;
	public TriangleStripPolyShapeElements getTriangleStripPolyShapeAccess() {
		return pTriangleStripPolyShape;
	}
	
	public ParserRule getTriangleStripPolyShapeRule() {
		return getTriangleStripPolyShapeAccess().getRule();
	}
	
	//Vertex:
	//	{Vertex} x=EDouble y=EDouble z=EDouble EInt? ENDLINE?;
	public VertexElements getVertexAccess() {
		return pVertex;
	}
	
	public ParserRule getVertexRule() {
		return getVertexAccess().getRule();
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	('-' | '+')? INT? '.' INT (('E' | 'e') ('-' | '+')? INT)?;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal ENDLINE:
	//	'\r'? '\n' | '\r';
	public TerminalRule getENDLINERule() {
		return tENDLINE;
	}
	
	//terminal SL_COMMENT:
	//	'#' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | 'ASCII' | 'DATASET POLYDATA'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
