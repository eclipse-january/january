/*
 * generated by Xtext 2.10.0
 */
grammar InternalVTK;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.eclipse.january.geometry.dsl.vtk.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.january.geometry.dsl.vtk.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.january.geometry.dsl.vtk.services.VTKGrammarAccess;

}

@parser::members {

 	private VTKGrammarAccess grammarAccess;

    public InternalVTKParser(TokenStream input, VTKGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Geometry";
   	}

   	@Override
   	protected VTKGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleGeometry
entryRuleGeometry returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGeometryRule()); }
	iv_ruleGeometry=ruleGeometry
	{ $current=$iv_ruleGeometry.current; }
	EOF;

// Rule Geometry
ruleGeometry returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGeometryAccess().getGeometryAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getGeometryAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGeometryRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.january.geometry.dsl.vtk.VTK.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_ENDLINE_2=RULE_ENDLINE
			{
				newLeafNode(this_ENDLINE_2, grammarAccess.getGeometryAccess().getENDLINETerminalRuleCall_2_0());
			}
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getGeometryAccess().getVertexSourcesVertexSourceParserRuleCall_2_1_0());
					}
					lv_vertexSources_3_0=ruleVertexSource
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGeometryRule());
						}
						add(
							$current,
							"vertexSources",
							lv_vertexSources_3_0,
							"org.eclipse.january.geometry.dsl.vtk.VTK.VertexSource");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					otherlv_4='POLYGONS'
					{
						newLeafNode(otherlv_4, grammarAccess.getGeometryAccess().getPOLYGONSKeyword_2_2_0_0());
					}
					this_INT_5=RULE_INT
					{
						newLeafNode(this_INT_5, grammarAccess.getGeometryAccess().getINTTerminalRuleCall_2_2_0_1());
					}
					this_INT_6=RULE_INT
					{
						newLeafNode(this_INT_6, grammarAccess.getGeometryAccess().getINTTerminalRuleCall_2_2_0_2());
					}
					(
						this_ENDLINE_7=RULE_ENDLINE
						{
							newLeafNode(this_ENDLINE_7, grammarAccess.getGeometryAccess().getENDLINETerminalRuleCall_2_2_0_3());
						}
					)?
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getGeometryAccess().getNodesPolyShapeParserRuleCall_2_2_1_0());
						}
						lv_nodes_8_0=rulePolyShape
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getGeometryRule());
							}
							add(
								$current,
								"nodes",
								lv_nodes_8_0,
								"org.eclipse.january.geometry.dsl.vtk.VTK.PolyShape");
							afterParserOrEnumRuleCall();
						}
					)
				)*
			)
			    |
			(
				(
					otherlv_9='TRIANGLE_STRIPS'
					{
						newLeafNode(otherlv_9, grammarAccess.getGeometryAccess().getTRIANGLE_STRIPSKeyword_2_3_0_0());
					}
					this_INT_10=RULE_INT
					{
						newLeafNode(this_INT_10, grammarAccess.getGeometryAccess().getINTTerminalRuleCall_2_3_0_1());
					}
					this_INT_11=RULE_INT
					{
						newLeafNode(this_INT_11, grammarAccess.getGeometryAccess().getINTTerminalRuleCall_2_3_0_2());
					}
					(
						this_ENDLINE_12=RULE_ENDLINE
						{
							newLeafNode(this_ENDLINE_12, grammarAccess.getGeometryAccess().getENDLINETerminalRuleCall_2_3_0_3());
						}
					)?
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getGeometryAccess().getNodesTriangleStripPolyShapeParserRuleCall_2_3_1_0());
						}
						lv_nodes_13_0=ruleTriangleStripPolyShape
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getGeometryRule());
							}
							add(
								$current,
								"nodes",
								lv_nodes_13_0,
								"org.eclipse.january.geometry.dsl.vtk.VTK.TriangleStripPolyShape");
							afterParserOrEnumRuleCall();
						}
					)
				)*
			)
		)*
	)
;

// Entry rule entryRuleVertexSource
entryRuleVertexSource returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVertexSourceRule()); }
	iv_ruleVertexSource=ruleVertexSource
	{ $current=$iv_ruleVertexSource.current; }
	EOF;

// Rule VertexSource
ruleVertexSource returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVertexSourceAccess().getVertexSourceAction_0(),
					$current);
			}
		)
		(
			otherlv_1='POINTS'
			{
				newLeafNode(otherlv_1, grammarAccess.getVertexSourceAccess().getPOINTSKeyword_1_0());
			}
			(
				{
					newCompositeNode(grammarAccess.getVertexSourceAccess().getEStringParserRuleCall_1_1());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)?
			(
				this_ENDLINE_3=RULE_ENDLINE
				{
					newLeafNode(this_ENDLINE_3, grammarAccess.getVertexSourceAccess().getENDLINETerminalRuleCall_1_2());
				}
			)?
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getVertexSourceAccess().getVerticesVertexParserRuleCall_2_0());
				}
				lv_vertices_4_0=ruleVertex
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVertexSourceRule());
					}
					add(
						$current,
						"vertices",
						lv_vertices_4_0,
						"org.eclipse.january.geometry.dsl.vtk.VTK.Vertex");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleEDouble
entryRuleEDouble returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEDoubleRule()); }
	iv_ruleEDouble=ruleEDouble
	{ $current=$iv_ruleEDouble.current.getText(); }
	EOF;

// Rule EDouble
ruleEDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_DOUBLE_0=RULE_DOUBLE
		{
			$current.merge(this_DOUBLE_0);
		}
		{
			newLeafNode(this_DOUBLE_0, grammarAccess.getEDoubleAccess().getDOUBLETerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getEDoubleAccess().getEIntParserRuleCall_1());
		}
		this_EInt_1=ruleEInt
		{
			$current.merge(this_EInt_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
		    |
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getEStringAccess().getINTTerminalRuleCall_2());
		}
		    |
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEStringAccess().getFullStopKeyword_3());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEStringAccess().getSolidusKeyword_4());
		}
		    |
		kw='\\'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEStringAccess().getReverseSolidusKeyword_5());
		}
		    |
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEStringAccess().getColonKeyword_6());
		}
		    |
		kw='_'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEStringAccess().get_Keyword_7());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEStringAccess().getHyphenMinusKeyword_8());
		}
	)+
;

// Entry rule entryRuleFace
entryRuleFace returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFaceRule()); }
	iv_ruleFace=ruleFace
	{ $current=$iv_ruleFace.current; }
	EOF;

// Rule Face
ruleFace returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFaceAccess().getFaceAction_0(),
					$current);
			}
		)
		{
			newCompositeNode(grammarAccess.getFaceAccess().getEIntParserRuleCall_1());
		}
		ruleEInt
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFaceAccess().getVertexIndicesEIntParserRuleCall_2_0());
				}
				lv_vertexIndices_2_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFaceRule());
					}
					add(
						$current,
						"vertexIndices",
						lv_vertexIndices_2_0,
						"org.eclipse.january.geometry.dsl.vtk.VTK.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			this_ENDLINE_3=RULE_ENDLINE
			{
				newLeafNode(this_ENDLINE_3, grammarAccess.getFaceAccess().getENDLINETerminalRuleCall_3());
			}
		)?
	)
;

// Entry rule entryRulePolyShape
entryRulePolyShape returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPolyShapeRule()); }
	iv_rulePolyShape=rulePolyShape
	{ $current=$iv_rulePolyShape.current; }
	EOF;

// Rule PolyShape
rulePolyShape returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPolyShapeAccess().getPolyShapeAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPolyShapeAccess().getFacesFaceParserRuleCall_1_0());
				}
				lv_faces_1_0=ruleFace
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPolyShapeRule());
					}
					add(
						$current,
						"faces",
						lv_faces_1_0,
						"org.eclipse.january.geometry.dsl.vtk.VTK.Face");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleTriangleStripPolyShape
entryRuleTriangleStripPolyShape returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTriangleStripPolyShapeRule()); }
	iv_ruleTriangleStripPolyShape=ruleTriangleStripPolyShape
	{ $current=$iv_ruleTriangleStripPolyShape.current; }
	EOF;

// Rule TriangleStripPolyShape
ruleTriangleStripPolyShape returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTriangleStripPolyShapeAccess().getTriangleStripPolyShapeAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTriangleStripPolyShapeAccess().getFacesFaceParserRuleCall_1_0());
				}
				lv_faces_1_0=ruleFace
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTriangleStripPolyShapeRule());
					}
					add(
						$current,
						"faces",
						lv_faces_1_0,
						"org.eclipse.january.geometry.dsl.vtk.VTK.Face");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleVertex
entryRuleVertex returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVertexRule()); }
	iv_ruleVertex=ruleVertex
	{ $current=$iv_ruleVertex.current; }
	EOF;

// Rule Vertex
ruleVertex returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVertexAccess().getVertexAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVertexAccess().getXEDoubleParserRuleCall_1_0());
				}
				lv_x_1_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVertexRule());
					}
					set(
						$current,
						"x",
						lv_x_1_0,
						"org.eclipse.january.geometry.dsl.vtk.VTK.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVertexAccess().getYEDoubleParserRuleCall_2_0());
				}
				lv_y_2_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVertexRule());
					}
					set(
						$current,
						"y",
						lv_y_2_0,
						"org.eclipse.january.geometry.dsl.vtk.VTK.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVertexAccess().getZEDoubleParserRuleCall_3_0());
				}
				lv_z_3_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVertexRule());
					}
					set(
						$current,
						"z",
						lv_z_3_0,
						"org.eclipse.january.geometry.dsl.vtk.VTK.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			{
				newCompositeNode(grammarAccess.getVertexAccess().getEIntParserRuleCall_4());
			}
			ruleEInt
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			this_ENDLINE_5=RULE_ENDLINE
			{
				newLeafNode(this_ENDLINE_5, grammarAccess.getVertexAccess().getENDLINETerminalRuleCall_5());
			}
		)?
	)
;

RULE_DOUBLE : ('-'|'+')? RULE_INT? '.' RULE_INT (('E'|'e') ('-'|'+')? RULE_INT)?;

RULE_ENDLINE : ('\r'? '\n'|'\r');

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'ASCII'|'DATASET POLYDATA')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_ANY_OTHER : .;
