/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.january.geometry.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MTLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MaterialSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.MTL.MaterialSource");
		private final Assignment cMaterialsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMaterialsMaterialParserRuleCall_0 = (RuleCall)cMaterialsAssignment.eContents().get(0);
		
		//MaterialSource:
		//	materials+=Material*;
		@Override public ParserRule getRule() { return rule; }
		
		//materials+=Material*
		public Assignment getMaterialsAssignment() { return cMaterialsAssignment; }
		
		//Material
		public RuleCall getMaterialsMaterialParserRuleCall_0() { return cMaterialsMaterialParserRuleCall_0; }
	}
	public class MaterialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.MTL.Material");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPhongMaterialParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTexturedMaterialParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Material:
		//	PhongMaterial | TexturedMaterial;
		@Override public ParserRule getRule() { return rule; }
		
		//PhongMaterial | TexturedMaterial
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PhongMaterial
		public RuleCall getPhongMaterialParserRuleCall_0() { return cPhongMaterialParserRuleCall_0; }
		
		//TexturedMaterial
		public RuleCall getTexturedMaterialParserRuleCall_1() { return cTexturedMaterialParserRuleCall_1; }
	}
	public class PhongMaterialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.MTL.PhongMaterial");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cNewmtlKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cKaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cAmbientAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cAmbientColorParserRuleCall_0_2_1_0 = (RuleCall)cAmbientAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cKdKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDiffuseAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDiffuseColorParserRuleCall_1_1_0 = (RuleCall)cDiffuseAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cKsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSpecularAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSpecularColorParserRuleCall_2_1_0 = (RuleCall)cSpecularAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cNsKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSpecularExponentAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cSpecularExponentEDoubleParserRuleCall_2_2_1_0 = (RuleCall)cSpecularExponentAssignment_2_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cUnorderedGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cDKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cOpaqueAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cOpaqueEDoubleParserRuleCall_3_0_1_0 = (RuleCall)cOpaqueAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cTrKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cTransparentAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cTransparentEDoubleParserRuleCall_3_1_1_0 = (RuleCall)cTransparentAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cUnorderedGroup.eContents().get(4);
		private final Keyword cIllumKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIlluminationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIlluminationEIntParserRuleCall_4_1_0 = (RuleCall)cIlluminationAssignment_4_1.eContents().get(0);
		
		//PhongMaterial:
		//	'newmtl' name=EString ('Ka' ambient=Color) & 'Kd' diffuse=Color & 'Ks' specular=Color ('Ns'
		//	specularExponent=EDouble)? & ('d' opaque=EDouble | 'Tr' transparent=EDouble)? & ('illum' illumination=EInt)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'newmtl' name=EString ('Ka' ambient=Color) & 'Kd' diffuse=Color & 'Ks' specular=Color ('Ns' specularExponent=EDouble)? &
		//('d' opaque=EDouble | 'Tr' transparent=EDouble)? & ('illum' illumination=EInt)?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//'newmtl' name=EString ('Ka' ambient=Color)
		public Group getGroup_0() { return cGroup_0; }
		
		//'newmtl'
		public Keyword getNewmtlKeyword_0_0() { return cNewmtlKeyword_0_0; }
		
		//name=EString
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_1_0() { return cNameEStringParserRuleCall_0_1_0; }
		
		//('Ka' ambient=Color)
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'Ka'
		public Keyword getKaKeyword_0_2_0() { return cKaKeyword_0_2_0; }
		
		//ambient=Color
		public Assignment getAmbientAssignment_0_2_1() { return cAmbientAssignment_0_2_1; }
		
		//Color
		public RuleCall getAmbientColorParserRuleCall_0_2_1_0() { return cAmbientColorParserRuleCall_0_2_1_0; }
		
		//'Kd' diffuse=Color
		public Group getGroup_1() { return cGroup_1; }
		
		//'Kd'
		public Keyword getKdKeyword_1_0() { return cKdKeyword_1_0; }
		
		//diffuse=Color
		public Assignment getDiffuseAssignment_1_1() { return cDiffuseAssignment_1_1; }
		
		//Color
		public RuleCall getDiffuseColorParserRuleCall_1_1_0() { return cDiffuseColorParserRuleCall_1_1_0; }
		
		//'Ks' specular=Color ('Ns' specularExponent=EDouble)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Ks'
		public Keyword getKsKeyword_2_0() { return cKsKeyword_2_0; }
		
		//specular=Color
		public Assignment getSpecularAssignment_2_1() { return cSpecularAssignment_2_1; }
		
		//Color
		public RuleCall getSpecularColorParserRuleCall_2_1_0() { return cSpecularColorParserRuleCall_2_1_0; }
		
		//('Ns' specularExponent=EDouble)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'Ns'
		public Keyword getNsKeyword_2_2_0() { return cNsKeyword_2_2_0; }
		
		//specularExponent=EDouble
		public Assignment getSpecularExponentAssignment_2_2_1() { return cSpecularExponentAssignment_2_2_1; }
		
		//EDouble
		public RuleCall getSpecularExponentEDoubleParserRuleCall_2_2_1_0() { return cSpecularExponentEDoubleParserRuleCall_2_2_1_0; }
		
		//('d' opaque=EDouble | 'Tr' transparent=EDouble)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'d' opaque=EDouble
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'d'
		public Keyword getDKeyword_3_0_0() { return cDKeyword_3_0_0; }
		
		//opaque=EDouble
		public Assignment getOpaqueAssignment_3_0_1() { return cOpaqueAssignment_3_0_1; }
		
		//EDouble
		public RuleCall getOpaqueEDoubleParserRuleCall_3_0_1_0() { return cOpaqueEDoubleParserRuleCall_3_0_1_0; }
		
		//'Tr' transparent=EDouble
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'Tr'
		public Keyword getTrKeyword_3_1_0() { return cTrKeyword_3_1_0; }
		
		//transparent=EDouble
		public Assignment getTransparentAssignment_3_1_1() { return cTransparentAssignment_3_1_1; }
		
		//EDouble
		public RuleCall getTransparentEDoubleParserRuleCall_3_1_1_0() { return cTransparentEDoubleParserRuleCall_3_1_1_0; }
		
		//('illum' illumination=EInt)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'illum'
		public Keyword getIllumKeyword_4_0() { return cIllumKeyword_4_0; }
		
		//illumination=EInt
		public Assignment getIlluminationAssignment_4_1() { return cIlluminationAssignment_4_1; }
		
		//EInt
		public RuleCall getIlluminationEIntParserRuleCall_4_1_0() { return cIlluminationEIntParserRuleCall_4_1_0; }
	}
	public class TexturedMaterialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.MTL.TexturedMaterial");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cNewmtlKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cKaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cAmbientAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cAmbientColorParserRuleCall_0_2_1_0 = (RuleCall)cAmbientAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cKdKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDiffuseAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDiffuseColorParserRuleCall_1_1_0 = (RuleCall)cDiffuseAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cKsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSpecularAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSpecularColorParserRuleCall_2_1_0 = (RuleCall)cSpecularAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cNsKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSpecularExponentAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cSpecularExponentEDoubleParserRuleCall_2_2_1_0 = (RuleCall)cSpecularExponentAssignment_2_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cUnorderedGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cDKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cOpaqueAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cOpaqueEDoubleParserRuleCall_3_0_1_0 = (RuleCall)cOpaqueAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Keyword cTrKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cTransparentAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cTransparentEDoubleParserRuleCall_3_1_1_0 = (RuleCall)cTransparentAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cUnorderedGroup.eContents().get(4);
		private final Keyword cIllumKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIlluminationAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIlluminationEIntParserRuleCall_4_1_0 = (RuleCall)cIlluminationAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cUnorderedGroup.eContents().get(5);
		private final Keyword cMap_KaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAmbientMapAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAmbientMapEStringParserRuleCall_5_1_0 = (RuleCall)cAmbientMapAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cUnorderedGroup.eContents().get(6);
		private final Keyword cMap_KdKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDiffuseMapAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDiffuseMapEStringParserRuleCall_6_1_0 = (RuleCall)cDiffuseMapAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cUnorderedGroup.eContents().get(7);
		private final Keyword cMap_KsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cSpecularMapAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cSpecularMapEStringParserRuleCall_7_1_0 = (RuleCall)cSpecularMapAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cUnorderedGroup.eContents().get(8);
		private final Keyword cMap_NsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cSpecularHighlightMapAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cSpecularHighlightMapEStringParserRuleCall_8_1_0 = (RuleCall)cSpecularHighlightMapAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cUnorderedGroup.eContents().get(9);
		private final Keyword cMap_dKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cAlphaMapAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cAlphaMapEStringParserRuleCall_9_1_0 = (RuleCall)cAlphaMapAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cUnorderedGroup.eContents().get(10);
		private final Keyword cMap_bumpKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cBumpMapAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cBumpMapEStringParserRuleCall_10_1_0 = (RuleCall)cBumpMapAssignment_10_1.eContents().get(0);
		
		//TexturedMaterial:
		//	'newmtl' name=EString ('Ka' ambient=Color) & 'Kd' diffuse=Color & 'Ks' specular=Color ('Ns'
		//	specularExponent=EDouble)? & ('d' opaque=EDouble | 'Tr' transparent=EDouble)? & ('illum' illumination=EInt)? &
		//	'map_Ka' ambientMap=EString & 'map_Kd' diffuseMap=EString & 'map_Ks' specularMap=EString & 'map_Ns'
		//	specularHighlightMap=EString & ('map_d' alphaMap=EString)? & ('map_bump' bumpMap=EString)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'newmtl' name=EString ('Ka' ambient=Color) & 'Kd' diffuse=Color & 'Ks' specular=Color ('Ns' specularExponent=EDouble)? &
		//('d' opaque=EDouble | 'Tr' transparent=EDouble)? & ('illum' illumination=EInt)? & 'map_Ka' ambientMap=EString &
		//'map_Kd' diffuseMap=EString & 'map_Ks' specularMap=EString & 'map_Ns' specularHighlightMap=EString & ('map_d'
		//alphaMap=EString)? & ('map_bump' bumpMap=EString)?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }
		
		//'newmtl' name=EString ('Ka' ambient=Color)
		public Group getGroup_0() { return cGroup_0; }
		
		//'newmtl'
		public Keyword getNewmtlKeyword_0_0() { return cNewmtlKeyword_0_0; }
		
		//name=EString
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_1_0() { return cNameEStringParserRuleCall_0_1_0; }
		
		//('Ka' ambient=Color)
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'Ka'
		public Keyword getKaKeyword_0_2_0() { return cKaKeyword_0_2_0; }
		
		//ambient=Color
		public Assignment getAmbientAssignment_0_2_1() { return cAmbientAssignment_0_2_1; }
		
		//Color
		public RuleCall getAmbientColorParserRuleCall_0_2_1_0() { return cAmbientColorParserRuleCall_0_2_1_0; }
		
		//'Kd' diffuse=Color
		public Group getGroup_1() { return cGroup_1; }
		
		//'Kd'
		public Keyword getKdKeyword_1_0() { return cKdKeyword_1_0; }
		
		//diffuse=Color
		public Assignment getDiffuseAssignment_1_1() { return cDiffuseAssignment_1_1; }
		
		//Color
		public RuleCall getDiffuseColorParserRuleCall_1_1_0() { return cDiffuseColorParserRuleCall_1_1_0; }
		
		//'Ks' specular=Color ('Ns' specularExponent=EDouble)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'Ks'
		public Keyword getKsKeyword_2_0() { return cKsKeyword_2_0; }
		
		//specular=Color
		public Assignment getSpecularAssignment_2_1() { return cSpecularAssignment_2_1; }
		
		//Color
		public RuleCall getSpecularColorParserRuleCall_2_1_0() { return cSpecularColorParserRuleCall_2_1_0; }
		
		//('Ns' specularExponent=EDouble)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'Ns'
		public Keyword getNsKeyword_2_2_0() { return cNsKeyword_2_2_0; }
		
		//specularExponent=EDouble
		public Assignment getSpecularExponentAssignment_2_2_1() { return cSpecularExponentAssignment_2_2_1; }
		
		//EDouble
		public RuleCall getSpecularExponentEDoubleParserRuleCall_2_2_1_0() { return cSpecularExponentEDoubleParserRuleCall_2_2_1_0; }
		
		//('d' opaque=EDouble | 'Tr' transparent=EDouble)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'d' opaque=EDouble
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'d'
		public Keyword getDKeyword_3_0_0() { return cDKeyword_3_0_0; }
		
		//opaque=EDouble
		public Assignment getOpaqueAssignment_3_0_1() { return cOpaqueAssignment_3_0_1; }
		
		//EDouble
		public RuleCall getOpaqueEDoubleParserRuleCall_3_0_1_0() { return cOpaqueEDoubleParserRuleCall_3_0_1_0; }
		
		//'Tr' transparent=EDouble
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'Tr'
		public Keyword getTrKeyword_3_1_0() { return cTrKeyword_3_1_0; }
		
		//transparent=EDouble
		public Assignment getTransparentAssignment_3_1_1() { return cTransparentAssignment_3_1_1; }
		
		//EDouble
		public RuleCall getTransparentEDoubleParserRuleCall_3_1_1_0() { return cTransparentEDoubleParserRuleCall_3_1_1_0; }
		
		//('illum' illumination=EInt)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'illum'
		public Keyword getIllumKeyword_4_0() { return cIllumKeyword_4_0; }
		
		//illumination=EInt
		public Assignment getIlluminationAssignment_4_1() { return cIlluminationAssignment_4_1; }
		
		//EInt
		public RuleCall getIlluminationEIntParserRuleCall_4_1_0() { return cIlluminationEIntParserRuleCall_4_1_0; }
		
		//'map_Ka' ambientMap=EString
		public Group getGroup_5() { return cGroup_5; }
		
		//'map_Ka'
		public Keyword getMap_KaKeyword_5_0() { return cMap_KaKeyword_5_0; }
		
		//ambientMap=EString
		public Assignment getAmbientMapAssignment_5_1() { return cAmbientMapAssignment_5_1; }
		
		//EString
		public RuleCall getAmbientMapEStringParserRuleCall_5_1_0() { return cAmbientMapEStringParserRuleCall_5_1_0; }
		
		//'map_Kd' diffuseMap=EString
		public Group getGroup_6() { return cGroup_6; }
		
		//'map_Kd'
		public Keyword getMap_KdKeyword_6_0() { return cMap_KdKeyword_6_0; }
		
		//diffuseMap=EString
		public Assignment getDiffuseMapAssignment_6_1() { return cDiffuseMapAssignment_6_1; }
		
		//EString
		public RuleCall getDiffuseMapEStringParserRuleCall_6_1_0() { return cDiffuseMapEStringParserRuleCall_6_1_0; }
		
		//'map_Ks' specularMap=EString
		public Group getGroup_7() { return cGroup_7; }
		
		//'map_Ks'
		public Keyword getMap_KsKeyword_7_0() { return cMap_KsKeyword_7_0; }
		
		//specularMap=EString
		public Assignment getSpecularMapAssignment_7_1() { return cSpecularMapAssignment_7_1; }
		
		//EString
		public RuleCall getSpecularMapEStringParserRuleCall_7_1_0() { return cSpecularMapEStringParserRuleCall_7_1_0; }
		
		//'map_Ns' specularHighlightMap=EString
		public Group getGroup_8() { return cGroup_8; }
		
		//'map_Ns'
		public Keyword getMap_NsKeyword_8_0() { return cMap_NsKeyword_8_0; }
		
		//specularHighlightMap=EString
		public Assignment getSpecularHighlightMapAssignment_8_1() { return cSpecularHighlightMapAssignment_8_1; }
		
		//EString
		public RuleCall getSpecularHighlightMapEStringParserRuleCall_8_1_0() { return cSpecularHighlightMapEStringParserRuleCall_8_1_0; }
		
		//('map_d' alphaMap=EString)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'map_d'
		public Keyword getMap_dKeyword_9_0() { return cMap_dKeyword_9_0; }
		
		//alphaMap=EString
		public Assignment getAlphaMapAssignment_9_1() { return cAlphaMapAssignment_9_1; }
		
		//EString
		public RuleCall getAlphaMapEStringParserRuleCall_9_1_0() { return cAlphaMapEStringParserRuleCall_9_1_0; }
		
		//('map_bump' bumpMap=EString)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'map_bump'
		public Keyword getMap_bumpKeyword_10_0() { return cMap_bumpKeyword_10_0; }
		
		//bumpMap=EString
		public Assignment getBumpMapAssignment_10_1() { return cBumpMapAssignment_10_1; }
		
		//EString
		public RuleCall getBumpMapEStringParserRuleCall_10_1_0() { return cBumpMapEStringParserRuleCall_10_1_0; }
	}
	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.MTL.Color");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRedEDoubleParserRuleCall_0_0 = (RuleCall)cRedAssignment_0.eContents().get(0);
		private final Assignment cGreenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGreenEDoubleParserRuleCall_1_0 = (RuleCall)cGreenAssignment_1.eContents().get(0);
		private final Assignment cBlueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlueEDoubleParserRuleCall_2_0 = (RuleCall)cBlueAssignment_2.eContents().get(0);
		
		//Color:
		//	red=EDouble green=EDouble blue=EDouble;
		@Override public ParserRule getRule() { return rule; }
		
		//red=EDouble green=EDouble blue=EDouble
		public Group getGroup() { return cGroup; }
		
		//red=EDouble
		public Assignment getRedAssignment_0() { return cRedAssignment_0; }
		
		//EDouble
		public RuleCall getRedEDoubleParserRuleCall_0_0() { return cRedEDoubleParserRuleCall_0_0; }
		
		//green=EDouble
		public Assignment getGreenAssignment_1() { return cGreenAssignment_1; }
		
		//EDouble
		public RuleCall getGreenEDoubleParserRuleCall_1_0() { return cGreenEDoubleParserRuleCall_1_0; }
		
		//blue=EDouble
		public Assignment getBlueAssignment_2() { return cBlueAssignment_2; }
		
		//EDouble
		public RuleCall getBlueEDoubleParserRuleCall_2_0() { return cBlueEDoubleParserRuleCall_2_0; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.MTL.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.MTL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Keyword cFullStopKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSolidusKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cReverseSolidusKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword c_Keyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cHyphenMinusKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//EString:
		//	(STRING | ID | INT | '.' | '/' | '\\' | ':' | '_' | '-')+;
		@Override public ParserRule getRule() { return rule; }
		
		//(STRING | ID | INT | '.' | '/' | '\\' | ':' | '_' | '-')+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//'/'
		public Keyword getSolidusKeyword_4() { return cSolidusKeyword_4; }
		
		//'\\'
		public Keyword getReverseSolidusKeyword_5() { return cReverseSolidusKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//'_'
		public Keyword get_Keyword_7() { return c_Keyword_7; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_8() { return cHyphenMinusKeyword_8; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.MTL.EDouble");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDOUBLETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEIntParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EDouble ecore::EDouble:
		//	DOUBLE | EInt
		@Override public ParserRule getRule() { return rule; }
		
		//DOUBLE | EInt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_0() { return cDOUBLETerminalRuleCall_0; }
		
		//EInt
		public RuleCall getEIntParserRuleCall_1() { return cEIntParserRuleCall_1; }
	}
	
	
	private final MaterialSourceElements pMaterialSource;
	private final MaterialElements pMaterial;
	private final PhongMaterialElements pPhongMaterial;
	private final TexturedMaterialElements pTexturedMaterial;
	private final ColorElements pColor;
	private final EIntElements pEInt;
	private final EStringElements pEString;
	private final EDoubleElements pEDouble;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tWS;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MTLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMaterialSource = new MaterialSourceElements();
		this.pMaterial = new MaterialElements();
		this.pPhongMaterial = new PhongMaterialElements();
		this.pTexturedMaterial = new TexturedMaterialElements();
		this.pColor = new ColorElements();
		this.pEInt = new EIntElements();
		this.pEString = new EStringElements();
		this.pEDouble = new EDoubleElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.MTL.SL_COMMENT");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.MTL.DOUBLE");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.MTL.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.january.geometry.xtext.MTL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MaterialSource:
	//	materials+=Material*;
	public MaterialSourceElements getMaterialSourceAccess() {
		return pMaterialSource;
	}
	
	public ParserRule getMaterialSourceRule() {
		return getMaterialSourceAccess().getRule();
	}
	
	//Material:
	//	PhongMaterial | TexturedMaterial;
	public MaterialElements getMaterialAccess() {
		return pMaterial;
	}
	
	public ParserRule getMaterialRule() {
		return getMaterialAccess().getRule();
	}
	
	//PhongMaterial:
	//	'newmtl' name=EString ('Ka' ambient=Color) & 'Kd' diffuse=Color & 'Ks' specular=Color ('Ns'
	//	specularExponent=EDouble)? & ('d' opaque=EDouble | 'Tr' transparent=EDouble)? & ('illum' illumination=EInt)?;
	public PhongMaterialElements getPhongMaterialAccess() {
		return pPhongMaterial;
	}
	
	public ParserRule getPhongMaterialRule() {
		return getPhongMaterialAccess().getRule();
	}
	
	//TexturedMaterial:
	//	'newmtl' name=EString ('Ka' ambient=Color) & 'Kd' diffuse=Color & 'Ks' specular=Color ('Ns'
	//	specularExponent=EDouble)? & ('d' opaque=EDouble | 'Tr' transparent=EDouble)? & ('illum' illumination=EInt)? &
	//	'map_Ka' ambientMap=EString & 'map_Kd' diffuseMap=EString & 'map_Ks' specularMap=EString & 'map_Ns'
	//	specularHighlightMap=EString & ('map_d' alphaMap=EString)? & ('map_bump' bumpMap=EString)?;
	public TexturedMaterialElements getTexturedMaterialAccess() {
		return pTexturedMaterial;
	}
	
	public ParserRule getTexturedMaterialRule() {
		return getTexturedMaterialAccess().getRule();
	}
	
	//Color:
	//	red=EDouble green=EDouble blue=EDouble;
	public ColorElements getColorAccess() {
		return pColor;
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EString:
	//	(STRING | ID | INT | '.' | '/' | '\\' | ':' | '_' | '-')+;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EDouble ecore::EDouble:
	//	DOUBLE | EInt
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//terminal SL_COMMENT:
	//	'#' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	('-' | '+')? INT? '.' INT (('E' | 'e') ('-' | '+')? INT)?;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
