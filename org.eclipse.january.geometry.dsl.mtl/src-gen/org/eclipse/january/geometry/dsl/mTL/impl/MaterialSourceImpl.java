/**
 * generated by Xtext 2.10.0
 */
package org.eclipse.january.geometry.dsl.mTL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.eclipse.january.geometry.dsl.mTL.MTLPackage;
import org.eclipse.january.geometry.dsl.mTL.Material;
import org.eclipse.january.geometry.dsl.mTL.MaterialSource;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Material Source</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.eclipse.january.geometry.dsl.mTL.impl.MaterialSourceImpl#getMaterials <em>Materials</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class MaterialSourceImpl extends MinimalEObjectImpl.Container implements MaterialSource
{
  /**
   * The cached value of the '{@link #getMaterials() <em>Materials</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMaterials()
   * @generated
   * @ordered
   */
  protected EList<Material> materials;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MaterialSourceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MTLPackage.Literals.MATERIAL_SOURCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Material> getMaterials()
  {
    if (materials == null)
    {
      materials = new EObjectContainmentEList<Material>(Material.class, this, MTLPackage.MATERIAL_SOURCE__MATERIALS);
    }
    return materials;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MTLPackage.MATERIAL_SOURCE__MATERIALS:
        return ((InternalEList<?>)getMaterials()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MTLPackage.MATERIAL_SOURCE__MATERIALS:
        return getMaterials();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MTLPackage.MATERIAL_SOURCE__MATERIALS:
        getMaterials().clear();
        getMaterials().addAll((Collection<? extends Material>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MTLPackage.MATERIAL_SOURCE__MATERIALS:
        getMaterials().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MTLPackage.MATERIAL_SOURCE__MATERIALS:
        return materials != null && !materials.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //MaterialSourceImpl
