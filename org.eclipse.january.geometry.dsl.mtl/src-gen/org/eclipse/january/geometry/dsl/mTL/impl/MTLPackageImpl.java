/**
 * generated by Xtext 2.10.0
 */
package org.eclipse.january.geometry.dsl.mTL.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;
import org.eclipse.january.geometry.dsl.mTL.Color;
import org.eclipse.january.geometry.dsl.mTL.MTLFactory;
import org.eclipse.january.geometry.dsl.mTL.MTLPackage;
import org.eclipse.january.geometry.dsl.mTL.Material;
import org.eclipse.january.geometry.dsl.mTL.MaterialSource;
import org.eclipse.january.geometry.dsl.mTL.PhongMaterial;
import org.eclipse.january.geometry.dsl.mTL.TexturedMaterial;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MTLPackageImpl extends EPackageImpl implements MTLPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass materialSourceEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass materialEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass phongMaterialEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass texturedMaterialEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass colorEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.eclipse.january.geometry.dsl.mTL.MTLPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private MTLPackageImpl()
  {
    super(eNS_URI, MTLFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   * 
   * <p>This method is used to initialize {@link MTLPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static MTLPackage init()
  {
    if (isInited) return (MTLPackage)EPackage.Registry.INSTANCE.getEPackage(MTLPackage.eNS_URI);

    // Obtain or create and register package
    MTLPackageImpl theMTLPackage = (MTLPackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof MTLPackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new MTLPackageImpl());

    isInited = true;

    // Create package meta-data objects
    theMTLPackage.createPackageContents();

    // Initialize created meta-data
    theMTLPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theMTLPackage.freeze();

  
    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(MTLPackage.eNS_URI, theMTLPackage);
    return theMTLPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMaterialSource()
  {
    return materialSourceEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMaterialSource_Materials()
  {
    return (EReference)materialSourceEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMaterial()
  {
    return materialEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMaterial_Name()
  {
    return (EAttribute)materialEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMaterial_Ambient()
  {
    return (EReference)materialEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMaterial_Diffuse()
  {
    return (EReference)materialEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMaterial_Specular()
  {
    return (EReference)materialEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMaterial_SpecularExponent()
  {
    return (EAttribute)materialEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMaterial_Opaque()
  {
    return (EAttribute)materialEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMaterial_Transparent()
  {
    return (EAttribute)materialEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMaterial_Illumination()
  {
    return (EAttribute)materialEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPhongMaterial()
  {
    return phongMaterialEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTexturedMaterial()
  {
    return texturedMaterialEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getTexturedMaterial_AmbientMap()
  {
    return (EAttribute)texturedMaterialEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getTexturedMaterial_DiffuseMap()
  {
    return (EAttribute)texturedMaterialEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getTexturedMaterial_SpecularMap()
  {
    return (EAttribute)texturedMaterialEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getTexturedMaterial_SpecularHighlightMap()
  {
    return (EAttribute)texturedMaterialEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getTexturedMaterial_AlphaMap()
  {
    return (EAttribute)texturedMaterialEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getTexturedMaterial_BumpMap()
  {
    return (EAttribute)texturedMaterialEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getColor()
  {
    return colorEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getColor_Red()
  {
    return (EAttribute)colorEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getColor_Green()
  {
    return (EAttribute)colorEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getColor_Blue()
  {
    return (EAttribute)colorEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MTLFactory getMTLFactory()
  {
    return (MTLFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    materialSourceEClass = createEClass(MATERIAL_SOURCE);
    createEReference(materialSourceEClass, MATERIAL_SOURCE__MATERIALS);

    materialEClass = createEClass(MATERIAL);
    createEAttribute(materialEClass, MATERIAL__NAME);
    createEReference(materialEClass, MATERIAL__AMBIENT);
    createEReference(materialEClass, MATERIAL__DIFFUSE);
    createEReference(materialEClass, MATERIAL__SPECULAR);
    createEAttribute(materialEClass, MATERIAL__SPECULAR_EXPONENT);
    createEAttribute(materialEClass, MATERIAL__OPAQUE);
    createEAttribute(materialEClass, MATERIAL__TRANSPARENT);
    createEAttribute(materialEClass, MATERIAL__ILLUMINATION);

    phongMaterialEClass = createEClass(PHONG_MATERIAL);

    texturedMaterialEClass = createEClass(TEXTURED_MATERIAL);
    createEAttribute(texturedMaterialEClass, TEXTURED_MATERIAL__AMBIENT_MAP);
    createEAttribute(texturedMaterialEClass, TEXTURED_MATERIAL__DIFFUSE_MAP);
    createEAttribute(texturedMaterialEClass, TEXTURED_MATERIAL__SPECULAR_MAP);
    createEAttribute(texturedMaterialEClass, TEXTURED_MATERIAL__SPECULAR_HIGHLIGHT_MAP);
    createEAttribute(texturedMaterialEClass, TEXTURED_MATERIAL__ALPHA_MAP);
    createEAttribute(texturedMaterialEClass, TEXTURED_MATERIAL__BUMP_MAP);

    colorEClass = createEClass(COLOR);
    createEAttribute(colorEClass, COLOR__RED);
    createEAttribute(colorEClass, COLOR__GREEN);
    createEAttribute(colorEClass, COLOR__BLUE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    phongMaterialEClass.getESuperTypes().add(this.getMaterial());
    texturedMaterialEClass.getESuperTypes().add(this.getMaterial());

    // Initialize classes and features; add operations and parameters
    initEClass(materialSourceEClass, MaterialSource.class, "MaterialSource", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMaterialSource_Materials(), this.getMaterial(), null, "materials", null, 0, -1, MaterialSource.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(materialEClass, Material.class, "Material", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMaterial_Name(), ecorePackage.getEString(), "name", null, 0, 1, Material.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMaterial_Ambient(), this.getColor(), null, "ambient", null, 0, 1, Material.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMaterial_Diffuse(), this.getColor(), null, "diffuse", null, 0, 1, Material.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMaterial_Specular(), this.getColor(), null, "specular", null, 0, 1, Material.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMaterial_SpecularExponent(), ecorePackage.getEDouble(), "specularExponent", null, 0, 1, Material.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMaterial_Opaque(), ecorePackage.getEDouble(), "opaque", null, 0, 1, Material.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMaterial_Transparent(), ecorePackage.getEDouble(), "transparent", null, 0, 1, Material.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMaterial_Illumination(), ecorePackage.getEInt(), "illumination", null, 0, 1, Material.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(phongMaterialEClass, PhongMaterial.class, "PhongMaterial", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(texturedMaterialEClass, TexturedMaterial.class, "TexturedMaterial", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTexturedMaterial_AmbientMap(), ecorePackage.getEString(), "ambientMap", null, 0, 1, TexturedMaterial.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTexturedMaterial_DiffuseMap(), ecorePackage.getEString(), "diffuseMap", null, 0, 1, TexturedMaterial.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTexturedMaterial_SpecularMap(), ecorePackage.getEString(), "specularMap", null, 0, 1, TexturedMaterial.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTexturedMaterial_SpecularHighlightMap(), ecorePackage.getEString(), "specularHighlightMap", null, 0, 1, TexturedMaterial.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTexturedMaterial_AlphaMap(), ecorePackage.getEString(), "alphaMap", null, 0, 1, TexturedMaterial.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTexturedMaterial_BumpMap(), ecorePackage.getEString(), "bumpMap", null, 0, 1, TexturedMaterial.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(colorEClass, Color.class, "Color", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getColor_Red(), ecorePackage.getEDouble(), "red", null, 0, 1, Color.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getColor_Green(), ecorePackage.getEDouble(), "green", null, 0, 1, Color.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getColor_Blue(), ecorePackage.getEDouble(), "blue", null, 0, 1, Color.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Create resource
    createResource(eNS_URI);
  }

} //MTLPackageImpl
