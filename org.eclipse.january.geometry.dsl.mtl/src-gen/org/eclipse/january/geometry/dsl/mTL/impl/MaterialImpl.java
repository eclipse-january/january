/**
 * generated by Xtext 2.10.0
 */
package org.eclipse.january.geometry.dsl.mTL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;
import org.eclipse.january.geometry.dsl.mTL.Color;
import org.eclipse.january.geometry.dsl.mTL.MTLPackage;
import org.eclipse.january.geometry.dsl.mTL.Material;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Material</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.eclipse.january.geometry.dsl.mTL.impl.MaterialImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.eclipse.january.geometry.dsl.mTL.impl.MaterialImpl#getAmbient <em>Ambient</em>}</li>
 *   <li>{@link org.eclipse.january.geometry.dsl.mTL.impl.MaterialImpl#getDiffuse <em>Diffuse</em>}</li>
 *   <li>{@link org.eclipse.january.geometry.dsl.mTL.impl.MaterialImpl#getSpecular <em>Specular</em>}</li>
 *   <li>{@link org.eclipse.january.geometry.dsl.mTL.impl.MaterialImpl#getSpecularExponent <em>Specular Exponent</em>}</li>
 *   <li>{@link org.eclipse.january.geometry.dsl.mTL.impl.MaterialImpl#getOpaque <em>Opaque</em>}</li>
 *   <li>{@link org.eclipse.january.geometry.dsl.mTL.impl.MaterialImpl#getTransparent <em>Transparent</em>}</li>
 *   <li>{@link org.eclipse.january.geometry.dsl.mTL.impl.MaterialImpl#getIllumination <em>Illumination</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class MaterialImpl extends MinimalEObjectImpl.Container implements Material
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getAmbient() <em>Ambient</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAmbient()
   * @generated
   * @ordered
   */
  protected Color ambient;

  /**
   * The cached value of the '{@link #getDiffuse() <em>Diffuse</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDiffuse()
   * @generated
   * @ordered
   */
  protected Color diffuse;

  /**
   * The cached value of the '{@link #getSpecular() <em>Specular</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpecular()
   * @generated
   * @ordered
   */
  protected Color specular;

  /**
   * The default value of the '{@link #getSpecularExponent() <em>Specular Exponent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpecularExponent()
   * @generated
   * @ordered
   */
  protected static final double SPECULAR_EXPONENT_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getSpecularExponent() <em>Specular Exponent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpecularExponent()
   * @generated
   * @ordered
   */
  protected double specularExponent = SPECULAR_EXPONENT_EDEFAULT;

  /**
   * The default value of the '{@link #getOpaque() <em>Opaque</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOpaque()
   * @generated
   * @ordered
   */
  protected static final double OPAQUE_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getOpaque() <em>Opaque</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOpaque()
   * @generated
   * @ordered
   */
  protected double opaque = OPAQUE_EDEFAULT;

  /**
   * The default value of the '{@link #getTransparent() <em>Transparent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransparent()
   * @generated
   * @ordered
   */
  protected static final double TRANSPARENT_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getTransparent() <em>Transparent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTransparent()
   * @generated
   * @ordered
   */
  protected double transparent = TRANSPARENT_EDEFAULT;

  /**
   * The default value of the '{@link #getIllumination() <em>Illumination</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIllumination()
   * @generated
   * @ordered
   */
  protected static final int ILLUMINATION_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getIllumination() <em>Illumination</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIllumination()
   * @generated
   * @ordered
   */
  protected int illumination = ILLUMINATION_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MaterialImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MTLPackage.Literals.MATERIAL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MTLPackage.MATERIAL__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Color getAmbient()
  {
    return ambient;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAmbient(Color newAmbient, NotificationChain msgs)
  {
    Color oldAmbient = ambient;
    ambient = newAmbient;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MTLPackage.MATERIAL__AMBIENT, oldAmbient, newAmbient);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAmbient(Color newAmbient)
  {
    if (newAmbient != ambient)
    {
      NotificationChain msgs = null;
      if (ambient != null)
        msgs = ((InternalEObject)ambient).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MTLPackage.MATERIAL__AMBIENT, null, msgs);
      if (newAmbient != null)
        msgs = ((InternalEObject)newAmbient).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MTLPackage.MATERIAL__AMBIENT, null, msgs);
      msgs = basicSetAmbient(newAmbient, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MTLPackage.MATERIAL__AMBIENT, newAmbient, newAmbient));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Color getDiffuse()
  {
    return diffuse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDiffuse(Color newDiffuse, NotificationChain msgs)
  {
    Color oldDiffuse = diffuse;
    diffuse = newDiffuse;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MTLPackage.MATERIAL__DIFFUSE, oldDiffuse, newDiffuse);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDiffuse(Color newDiffuse)
  {
    if (newDiffuse != diffuse)
    {
      NotificationChain msgs = null;
      if (diffuse != null)
        msgs = ((InternalEObject)diffuse).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MTLPackage.MATERIAL__DIFFUSE, null, msgs);
      if (newDiffuse != null)
        msgs = ((InternalEObject)newDiffuse).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MTLPackage.MATERIAL__DIFFUSE, null, msgs);
      msgs = basicSetDiffuse(newDiffuse, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MTLPackage.MATERIAL__DIFFUSE, newDiffuse, newDiffuse));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Color getSpecular()
  {
    return specular;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSpecular(Color newSpecular, NotificationChain msgs)
  {
    Color oldSpecular = specular;
    specular = newSpecular;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MTLPackage.MATERIAL__SPECULAR, oldSpecular, newSpecular);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSpecular(Color newSpecular)
  {
    if (newSpecular != specular)
    {
      NotificationChain msgs = null;
      if (specular != null)
        msgs = ((InternalEObject)specular).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MTLPackage.MATERIAL__SPECULAR, null, msgs);
      if (newSpecular != null)
        msgs = ((InternalEObject)newSpecular).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MTLPackage.MATERIAL__SPECULAR, null, msgs);
      msgs = basicSetSpecular(newSpecular, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MTLPackage.MATERIAL__SPECULAR, newSpecular, newSpecular));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public double getSpecularExponent()
  {
    return specularExponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSpecularExponent(double newSpecularExponent)
  {
    double oldSpecularExponent = specularExponent;
    specularExponent = newSpecularExponent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MTLPackage.MATERIAL__SPECULAR_EXPONENT, oldSpecularExponent, specularExponent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public double getOpaque()
  {
    return opaque;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOpaque(double newOpaque)
  {
    double oldOpaque = opaque;
    opaque = newOpaque;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MTLPackage.MATERIAL__OPAQUE, oldOpaque, opaque));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public double getTransparent()
  {
    return transparent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTransparent(double newTransparent)
  {
    double oldTransparent = transparent;
    transparent = newTransparent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MTLPackage.MATERIAL__TRANSPARENT, oldTransparent, transparent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getIllumination()
  {
    return illumination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIllumination(int newIllumination)
  {
    int oldIllumination = illumination;
    illumination = newIllumination;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MTLPackage.MATERIAL__ILLUMINATION, oldIllumination, illumination));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MTLPackage.MATERIAL__AMBIENT:
        return basicSetAmbient(null, msgs);
      case MTLPackage.MATERIAL__DIFFUSE:
        return basicSetDiffuse(null, msgs);
      case MTLPackage.MATERIAL__SPECULAR:
        return basicSetSpecular(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MTLPackage.MATERIAL__NAME:
        return getName();
      case MTLPackage.MATERIAL__AMBIENT:
        return getAmbient();
      case MTLPackage.MATERIAL__DIFFUSE:
        return getDiffuse();
      case MTLPackage.MATERIAL__SPECULAR:
        return getSpecular();
      case MTLPackage.MATERIAL__SPECULAR_EXPONENT:
        return getSpecularExponent();
      case MTLPackage.MATERIAL__OPAQUE:
        return getOpaque();
      case MTLPackage.MATERIAL__TRANSPARENT:
        return getTransparent();
      case MTLPackage.MATERIAL__ILLUMINATION:
        return getIllumination();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MTLPackage.MATERIAL__NAME:
        setName((String)newValue);
        return;
      case MTLPackage.MATERIAL__AMBIENT:
        setAmbient((Color)newValue);
        return;
      case MTLPackage.MATERIAL__DIFFUSE:
        setDiffuse((Color)newValue);
        return;
      case MTLPackage.MATERIAL__SPECULAR:
        setSpecular((Color)newValue);
        return;
      case MTLPackage.MATERIAL__SPECULAR_EXPONENT:
        setSpecularExponent((Double)newValue);
        return;
      case MTLPackage.MATERIAL__OPAQUE:
        setOpaque((Double)newValue);
        return;
      case MTLPackage.MATERIAL__TRANSPARENT:
        setTransparent((Double)newValue);
        return;
      case MTLPackage.MATERIAL__ILLUMINATION:
        setIllumination((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MTLPackage.MATERIAL__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MTLPackage.MATERIAL__AMBIENT:
        setAmbient((Color)null);
        return;
      case MTLPackage.MATERIAL__DIFFUSE:
        setDiffuse((Color)null);
        return;
      case MTLPackage.MATERIAL__SPECULAR:
        setSpecular((Color)null);
        return;
      case MTLPackage.MATERIAL__SPECULAR_EXPONENT:
        setSpecularExponent(SPECULAR_EXPONENT_EDEFAULT);
        return;
      case MTLPackage.MATERIAL__OPAQUE:
        setOpaque(OPAQUE_EDEFAULT);
        return;
      case MTLPackage.MATERIAL__TRANSPARENT:
        setTransparent(TRANSPARENT_EDEFAULT);
        return;
      case MTLPackage.MATERIAL__ILLUMINATION:
        setIllumination(ILLUMINATION_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MTLPackage.MATERIAL__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MTLPackage.MATERIAL__AMBIENT:
        return ambient != null;
      case MTLPackage.MATERIAL__DIFFUSE:
        return diffuse != null;
      case MTLPackage.MATERIAL__SPECULAR:
        return specular != null;
      case MTLPackage.MATERIAL__SPECULAR_EXPONENT:
        return specularExponent != SPECULAR_EXPONENT_EDEFAULT;
      case MTLPackage.MATERIAL__OPAQUE:
        return opaque != OPAQUE_EDEFAULT;
      case MTLPackage.MATERIAL__TRANSPARENT:
        return transparent != TRANSPARENT_EDEFAULT;
      case MTLPackage.MATERIAL__ILLUMINATION:
        return illumination != ILLUMINATION_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", specularExponent: ");
    result.append(specularExponent);
    result.append(", opaque: ");
    result.append(opaque);
    result.append(", transparent: ");
    result.append(transparent);
    result.append(", illumination: ");
    result.append(illumination);
    result.append(')');
    return result.toString();
  }

} //MaterialImpl
