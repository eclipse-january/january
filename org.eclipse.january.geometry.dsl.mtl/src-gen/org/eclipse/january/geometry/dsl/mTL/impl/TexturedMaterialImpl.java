/**
 * generated by Xtext 2.10.0
 */
package org.eclipse.january.geometry.dsl.mTL.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.january.geometry.dsl.mTL.MTLPackage;
import org.eclipse.january.geometry.dsl.mTL.TexturedMaterial;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Textured Material</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.eclipse.january.geometry.dsl.mTL.impl.TexturedMaterialImpl#getAmbientMap <em>Ambient Map</em>}</li>
 *   <li>{@link org.eclipse.january.geometry.dsl.mTL.impl.TexturedMaterialImpl#getDiffuseMap <em>Diffuse Map</em>}</li>
 *   <li>{@link org.eclipse.january.geometry.dsl.mTL.impl.TexturedMaterialImpl#getSpecularMap <em>Specular Map</em>}</li>
 *   <li>{@link org.eclipse.january.geometry.dsl.mTL.impl.TexturedMaterialImpl#getSpecularHighlightMap <em>Specular Highlight Map</em>}</li>
 *   <li>{@link org.eclipse.january.geometry.dsl.mTL.impl.TexturedMaterialImpl#getAlphaMap <em>Alpha Map</em>}</li>
 *   <li>{@link org.eclipse.january.geometry.dsl.mTL.impl.TexturedMaterialImpl#getBumpMap <em>Bump Map</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class TexturedMaterialImpl extends MaterialImpl implements TexturedMaterial
{
  /**
   * The default value of the '{@link #getAmbientMap() <em>Ambient Map</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAmbientMap()
   * @generated
   * @ordered
   */
  protected static final String AMBIENT_MAP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAmbientMap() <em>Ambient Map</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAmbientMap()
   * @generated
   * @ordered
   */
  protected String ambientMap = AMBIENT_MAP_EDEFAULT;

  /**
   * The default value of the '{@link #getDiffuseMap() <em>Diffuse Map</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDiffuseMap()
   * @generated
   * @ordered
   */
  protected static final String DIFFUSE_MAP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDiffuseMap() <em>Diffuse Map</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDiffuseMap()
   * @generated
   * @ordered
   */
  protected String diffuseMap = DIFFUSE_MAP_EDEFAULT;

  /**
   * The default value of the '{@link #getSpecularMap() <em>Specular Map</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpecularMap()
   * @generated
   * @ordered
   */
  protected static final String SPECULAR_MAP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSpecularMap() <em>Specular Map</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpecularMap()
   * @generated
   * @ordered
   */
  protected String specularMap = SPECULAR_MAP_EDEFAULT;

  /**
   * The default value of the '{@link #getSpecularHighlightMap() <em>Specular Highlight Map</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpecularHighlightMap()
   * @generated
   * @ordered
   */
  protected static final String SPECULAR_HIGHLIGHT_MAP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSpecularHighlightMap() <em>Specular Highlight Map</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSpecularHighlightMap()
   * @generated
   * @ordered
   */
  protected String specularHighlightMap = SPECULAR_HIGHLIGHT_MAP_EDEFAULT;

  /**
   * The default value of the '{@link #getAlphaMap() <em>Alpha Map</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlphaMap()
   * @generated
   * @ordered
   */
  protected static final String ALPHA_MAP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAlphaMap() <em>Alpha Map</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlphaMap()
   * @generated
   * @ordered
   */
  protected String alphaMap = ALPHA_MAP_EDEFAULT;

  /**
   * The default value of the '{@link #getBumpMap() <em>Bump Map</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBumpMap()
   * @generated
   * @ordered
   */
  protected static final String BUMP_MAP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBumpMap() <em>Bump Map</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBumpMap()
   * @generated
   * @ordered
   */
  protected String bumpMap = BUMP_MAP_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TexturedMaterialImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MTLPackage.Literals.TEXTURED_MATERIAL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getAmbientMap()
  {
    return ambientMap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAmbientMap(String newAmbientMap)
  {
    String oldAmbientMap = ambientMap;
    ambientMap = newAmbientMap;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MTLPackage.TEXTURED_MATERIAL__AMBIENT_MAP, oldAmbientMap, ambientMap));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDiffuseMap()
  {
    return diffuseMap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDiffuseMap(String newDiffuseMap)
  {
    String oldDiffuseMap = diffuseMap;
    diffuseMap = newDiffuseMap;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MTLPackage.TEXTURED_MATERIAL__DIFFUSE_MAP, oldDiffuseMap, diffuseMap));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSpecularMap()
  {
    return specularMap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSpecularMap(String newSpecularMap)
  {
    String oldSpecularMap = specularMap;
    specularMap = newSpecularMap;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MTLPackage.TEXTURED_MATERIAL__SPECULAR_MAP, oldSpecularMap, specularMap));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSpecularHighlightMap()
  {
    return specularHighlightMap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSpecularHighlightMap(String newSpecularHighlightMap)
  {
    String oldSpecularHighlightMap = specularHighlightMap;
    specularHighlightMap = newSpecularHighlightMap;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MTLPackage.TEXTURED_MATERIAL__SPECULAR_HIGHLIGHT_MAP, oldSpecularHighlightMap, specularHighlightMap));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getAlphaMap()
  {
    return alphaMap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAlphaMap(String newAlphaMap)
  {
    String oldAlphaMap = alphaMap;
    alphaMap = newAlphaMap;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MTLPackage.TEXTURED_MATERIAL__ALPHA_MAP, oldAlphaMap, alphaMap));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getBumpMap()
  {
    return bumpMap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBumpMap(String newBumpMap)
  {
    String oldBumpMap = bumpMap;
    bumpMap = newBumpMap;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MTLPackage.TEXTURED_MATERIAL__BUMP_MAP, oldBumpMap, bumpMap));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MTLPackage.TEXTURED_MATERIAL__AMBIENT_MAP:
        return getAmbientMap();
      case MTLPackage.TEXTURED_MATERIAL__DIFFUSE_MAP:
        return getDiffuseMap();
      case MTLPackage.TEXTURED_MATERIAL__SPECULAR_MAP:
        return getSpecularMap();
      case MTLPackage.TEXTURED_MATERIAL__SPECULAR_HIGHLIGHT_MAP:
        return getSpecularHighlightMap();
      case MTLPackage.TEXTURED_MATERIAL__ALPHA_MAP:
        return getAlphaMap();
      case MTLPackage.TEXTURED_MATERIAL__BUMP_MAP:
        return getBumpMap();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MTLPackage.TEXTURED_MATERIAL__AMBIENT_MAP:
        setAmbientMap((String)newValue);
        return;
      case MTLPackage.TEXTURED_MATERIAL__DIFFUSE_MAP:
        setDiffuseMap((String)newValue);
        return;
      case MTLPackage.TEXTURED_MATERIAL__SPECULAR_MAP:
        setSpecularMap((String)newValue);
        return;
      case MTLPackage.TEXTURED_MATERIAL__SPECULAR_HIGHLIGHT_MAP:
        setSpecularHighlightMap((String)newValue);
        return;
      case MTLPackage.TEXTURED_MATERIAL__ALPHA_MAP:
        setAlphaMap((String)newValue);
        return;
      case MTLPackage.TEXTURED_MATERIAL__BUMP_MAP:
        setBumpMap((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MTLPackage.TEXTURED_MATERIAL__AMBIENT_MAP:
        setAmbientMap(AMBIENT_MAP_EDEFAULT);
        return;
      case MTLPackage.TEXTURED_MATERIAL__DIFFUSE_MAP:
        setDiffuseMap(DIFFUSE_MAP_EDEFAULT);
        return;
      case MTLPackage.TEXTURED_MATERIAL__SPECULAR_MAP:
        setSpecularMap(SPECULAR_MAP_EDEFAULT);
        return;
      case MTLPackage.TEXTURED_MATERIAL__SPECULAR_HIGHLIGHT_MAP:
        setSpecularHighlightMap(SPECULAR_HIGHLIGHT_MAP_EDEFAULT);
        return;
      case MTLPackage.TEXTURED_MATERIAL__ALPHA_MAP:
        setAlphaMap(ALPHA_MAP_EDEFAULT);
        return;
      case MTLPackage.TEXTURED_MATERIAL__BUMP_MAP:
        setBumpMap(BUMP_MAP_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MTLPackage.TEXTURED_MATERIAL__AMBIENT_MAP:
        return AMBIENT_MAP_EDEFAULT == null ? ambientMap != null : !AMBIENT_MAP_EDEFAULT.equals(ambientMap);
      case MTLPackage.TEXTURED_MATERIAL__DIFFUSE_MAP:
        return DIFFUSE_MAP_EDEFAULT == null ? diffuseMap != null : !DIFFUSE_MAP_EDEFAULT.equals(diffuseMap);
      case MTLPackage.TEXTURED_MATERIAL__SPECULAR_MAP:
        return SPECULAR_MAP_EDEFAULT == null ? specularMap != null : !SPECULAR_MAP_EDEFAULT.equals(specularMap);
      case MTLPackage.TEXTURED_MATERIAL__SPECULAR_HIGHLIGHT_MAP:
        return SPECULAR_HIGHLIGHT_MAP_EDEFAULT == null ? specularHighlightMap != null : !SPECULAR_HIGHLIGHT_MAP_EDEFAULT.equals(specularHighlightMap);
      case MTLPackage.TEXTURED_MATERIAL__ALPHA_MAP:
        return ALPHA_MAP_EDEFAULT == null ? alphaMap != null : !ALPHA_MAP_EDEFAULT.equals(alphaMap);
      case MTLPackage.TEXTURED_MATERIAL__BUMP_MAP:
        return BUMP_MAP_EDEFAULT == null ? bumpMap != null : !BUMP_MAP_EDEFAULT.equals(bumpMap);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (ambientMap: ");
    result.append(ambientMap);
    result.append(", diffuseMap: ");
    result.append(diffuseMap);
    result.append(", specularMap: ");
    result.append(specularMap);
    result.append(", specularHighlightMap: ");
    result.append(specularHighlightMap);
    result.append(", alphaMap: ");
    result.append(alphaMap);
    result.append(", bumpMap: ");
    result.append(bumpMap);
    result.append(')');
    return result.toString();
  }

} //TexturedMaterialImpl
