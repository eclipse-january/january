/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.january.geometry.dsl.vtk.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.january.geometry.dsl.vtk.ide.contentassist.antlr.internal.InternalVTKParser;
import org.eclipse.january.geometry.dsl.vtk.services.VTKGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class VTKParser extends AbstractContentAssistParser {

	@Inject
	private VTKGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalVTKParser createParser() {
		InternalVTKParser result = new InternalVTKParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getGeometryAccess().getAlternatives_2(), "rule__Geometry__Alternatives_2");
					put(grammarAccess.getEDoubleAccess().getAlternatives(), "rule__EDouble__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getGeometryAccess().getGroup(), "rule__Geometry__Group__0");
					put(grammarAccess.getGeometryAccess().getGroup_2_2(), "rule__Geometry__Group_2_2__0");
					put(grammarAccess.getGeometryAccess().getGroup_2_2_0(), "rule__Geometry__Group_2_2_0__0");
					put(grammarAccess.getGeometryAccess().getGroup_2_3(), "rule__Geometry__Group_2_3__0");
					put(grammarAccess.getGeometryAccess().getGroup_2_3_0(), "rule__Geometry__Group_2_3_0__0");
					put(grammarAccess.getVertexSourceAccess().getGroup(), "rule__VertexSource__Group__0");
					put(grammarAccess.getVertexSourceAccess().getGroup_1(), "rule__VertexSource__Group_1__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getFaceAccess().getGroup(), "rule__Face__Group__0");
					put(grammarAccess.getPolyShapeAccess().getGroup(), "rule__PolyShape__Group__0");
					put(grammarAccess.getTriangleStripPolyShapeAccess().getGroup(), "rule__TriangleStripPolyShape__Group__0");
					put(grammarAccess.getVertexAccess().getGroup(), "rule__Vertex__Group__0");
					put(grammarAccess.getGeometryAccess().getNameAssignment_1(), "rule__Geometry__NameAssignment_1");
					put(grammarAccess.getGeometryAccess().getVertexSourcesAssignment_2_1(), "rule__Geometry__VertexSourcesAssignment_2_1");
					put(grammarAccess.getGeometryAccess().getNodesAssignment_2_2_1(), "rule__Geometry__NodesAssignment_2_2_1");
					put(grammarAccess.getGeometryAccess().getNodesAssignment_2_3_1(), "rule__Geometry__NodesAssignment_2_3_1");
					put(grammarAccess.getVertexSourceAccess().getVerticesAssignment_2(), "rule__VertexSource__VerticesAssignment_2");
					put(grammarAccess.getFaceAccess().getVertexIndicesAssignment_2(), "rule__Face__VertexIndicesAssignment_2");
					put(grammarAccess.getPolyShapeAccess().getFacesAssignment_1(), "rule__PolyShape__FacesAssignment_1");
					put(grammarAccess.getTriangleStripPolyShapeAccess().getFacesAssignment_1(), "rule__TriangleStripPolyShape__FacesAssignment_1");
					put(grammarAccess.getVertexAccess().getXAssignment_1(), "rule__Vertex__XAssignment_1");
					put(grammarAccess.getVertexAccess().getYAssignment_2(), "rule__Vertex__YAssignment_2");
					put(grammarAccess.getVertexAccess().getZAssignment_3(), "rule__Vertex__ZAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalVTKParser typedParser = (InternalVTKParser) parser;
			typedParser.entryRuleGeometry();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_SL_COMMENT", "RULE_WS" };
	}

	public VTKGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(VTKGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
