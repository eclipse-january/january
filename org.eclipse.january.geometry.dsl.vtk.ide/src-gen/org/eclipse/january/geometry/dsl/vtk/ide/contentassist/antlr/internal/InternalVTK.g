/*
 * generated by Xtext 2.10.0
 */
grammar InternalVTK;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.eclipse.january.geometry.dsl.vtk.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.january.geometry.dsl.vtk.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.eclipse.january.geometry.dsl.vtk.services.VTKGrammarAccess;

}
@parser::members {
	private VTKGrammarAccess grammarAccess;

	public void setGrammarAccess(VTKGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleGeometry
entryRuleGeometry
:
{ before(grammarAccess.getGeometryRule()); }
	 ruleGeometry
{ after(grammarAccess.getGeometryRule()); } 
	 EOF 
;

// Rule Geometry
ruleGeometry 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGeometryAccess().getGroup()); }
		(rule__Geometry__Group__0)
		{ after(grammarAccess.getGeometryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVertexSource
entryRuleVertexSource
:
{ before(grammarAccess.getVertexSourceRule()); }
	 ruleVertexSource
{ after(grammarAccess.getVertexSourceRule()); } 
	 EOF 
;

// Rule VertexSource
ruleVertexSource 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVertexSourceAccess().getGroup()); }
		(rule__VertexSource__Group__0)
		{ after(grammarAccess.getVertexSourceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEDouble
entryRuleEDouble
:
{ before(grammarAccess.getEDoubleRule()); }
	 ruleEDouble
{ after(grammarAccess.getEDoubleRule()); } 
	 EOF 
;

// Rule EDouble
ruleEDouble 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEDoubleAccess().getAlternatives()); }
		(rule__EDouble__Alternatives)
		{ after(grammarAccess.getEDoubleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getEStringAccess().getAlternatives()); }
			(rule__EString__Alternatives)
			{ after(grammarAccess.getEStringAccess().getAlternatives()); }
		)
		(
			{ before(grammarAccess.getEStringAccess().getAlternatives()); }
			(rule__EString__Alternatives)*
			{ after(grammarAccess.getEStringAccess().getAlternatives()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFace
entryRuleFace
:
{ before(grammarAccess.getFaceRule()); }
	 ruleFace
{ after(grammarAccess.getFaceRule()); } 
	 EOF 
;

// Rule Face
ruleFace 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFaceAccess().getGroup()); }
		(rule__Face__Group__0)
		{ after(grammarAccess.getFaceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePolyShape
entryRulePolyShape
:
{ before(grammarAccess.getPolyShapeRule()); }
	 rulePolyShape
{ after(grammarAccess.getPolyShapeRule()); } 
	 EOF 
;

// Rule PolyShape
rulePolyShape 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPolyShapeAccess().getGroup()); }
		(rule__PolyShape__Group__0)
		{ after(grammarAccess.getPolyShapeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTriangleStripPolyShape
entryRuleTriangleStripPolyShape
:
{ before(grammarAccess.getTriangleStripPolyShapeRule()); }
	 ruleTriangleStripPolyShape
{ after(grammarAccess.getTriangleStripPolyShapeRule()); } 
	 EOF 
;

// Rule TriangleStripPolyShape
ruleTriangleStripPolyShape 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTriangleStripPolyShapeAccess().getGroup()); }
		(rule__TriangleStripPolyShape__Group__0)
		{ after(grammarAccess.getTriangleStripPolyShapeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVertex
entryRuleVertex
:
{ before(grammarAccess.getVertexRule()); }
	 ruleVertex
{ after(grammarAccess.getVertexRule()); } 
	 EOF 
;

// Rule Vertex
ruleVertex 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVertexAccess().getGroup()); }
		(rule__Vertex__Group__0)
		{ after(grammarAccess.getVertexAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeometryAccess().getENDLINETerminalRuleCall_2_0()); }
		RULE_ENDLINE
		{ after(grammarAccess.getGeometryAccess().getENDLINETerminalRuleCall_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getGeometryAccess().getVertexSourcesAssignment_2_1()); }
		(rule__Geometry__VertexSourcesAssignment_2_1)
		{ after(grammarAccess.getGeometryAccess().getVertexSourcesAssignment_2_1()); }
	)
	|
	(
		{ before(grammarAccess.getGeometryAccess().getGroup_2_2()); }
		(rule__Geometry__Group_2_2__0)
		{ after(grammarAccess.getGeometryAccess().getGroup_2_2()); }
	)
	|
	(
		{ before(grammarAccess.getGeometryAccess().getGroup_2_3()); }
		(rule__Geometry__Group_2_3__0)
		{ after(grammarAccess.getGeometryAccess().getGroup_2_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEDoubleAccess().getDOUBLETerminalRuleCall_0()); }
		RULE_DOUBLE
		{ after(grammarAccess.getEDoubleAccess().getDOUBLETerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEDoubleAccess().getEIntParserRuleCall_1()); }
		ruleEInt
		{ after(grammarAccess.getEDoubleAccess().getEIntParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getINTTerminalRuleCall_2()); }
		RULE_INT
		{ after(grammarAccess.getEStringAccess().getINTTerminalRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getFullStopKeyword_3()); }
		'.'
		{ after(grammarAccess.getEStringAccess().getFullStopKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getSolidusKeyword_4()); }
		'/'
		{ after(grammarAccess.getEStringAccess().getSolidusKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getReverseSolidusKeyword_5()); }
		'\\'
		{ after(grammarAccess.getEStringAccess().getReverseSolidusKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getColonKeyword_6()); }
		':'
		{ after(grammarAccess.getEStringAccess().getColonKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().get_Keyword_7()); }
		'_'
		{ after(grammarAccess.getEStringAccess().get_Keyword_7()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getHyphenMinusKeyword_8()); }
		'-'
		{ after(grammarAccess.getEStringAccess().getHyphenMinusKeyword_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Geometry__Group__0__Impl
	rule__Geometry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeometryAccess().getGeometryAction_0()); }
	()
	{ after(grammarAccess.getGeometryAccess().getGeometryAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Geometry__Group__1__Impl
	rule__Geometry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeometryAccess().getNameAssignment_1()); }
	(rule__Geometry__NameAssignment_1)
	{ after(grammarAccess.getGeometryAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Geometry__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeometryAccess().getAlternatives_2()); }
	(rule__Geometry__Alternatives_2)*
	{ after(grammarAccess.getGeometryAccess().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group_2_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Geometry__Group_2_2__0__Impl
	rule__Geometry__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeometryAccess().getGroup_2_2_0()); }
	(rule__Geometry__Group_2_2_0__0)
	{ after(grammarAccess.getGeometryAccess().getGroup_2_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Geometry__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeometryAccess().getNodesAssignment_2_2_1()); }
	(rule__Geometry__NodesAssignment_2_2_1)*
	{ after(grammarAccess.getGeometryAccess().getNodesAssignment_2_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group_2_2_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Geometry__Group_2_2_0__0__Impl
	rule__Geometry__Group_2_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2_2_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeometryAccess().getPOLYGONSKeyword_2_2_0_0()); }
	'POLYGONS'
	{ after(grammarAccess.getGeometryAccess().getPOLYGONSKeyword_2_2_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2_2_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Geometry__Group_2_2_0__1__Impl
	rule__Geometry__Group_2_2_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2_2_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeometryAccess().getINTTerminalRuleCall_2_2_0_1()); }
	RULE_INT
	{ after(grammarAccess.getGeometryAccess().getINTTerminalRuleCall_2_2_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2_2_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Geometry__Group_2_2_0__2__Impl
	rule__Geometry__Group_2_2_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2_2_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeometryAccess().getINTTerminalRuleCall_2_2_0_2()); }
	RULE_INT
	{ after(grammarAccess.getGeometryAccess().getINTTerminalRuleCall_2_2_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2_2_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Geometry__Group_2_2_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2_2_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeometryAccess().getENDLINETerminalRuleCall_2_2_0_3()); }
	(RULE_ENDLINE)?
	{ after(grammarAccess.getGeometryAccess().getENDLINETerminalRuleCall_2_2_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group_2_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Geometry__Group_2_3__0__Impl
	rule__Geometry__Group_2_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeometryAccess().getGroup_2_3_0()); }
	(rule__Geometry__Group_2_3_0__0)
	{ after(grammarAccess.getGeometryAccess().getGroup_2_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Geometry__Group_2_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeometryAccess().getNodesAssignment_2_3_1()); }
	(rule__Geometry__NodesAssignment_2_3_1)*
	{ after(grammarAccess.getGeometryAccess().getNodesAssignment_2_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__Group_2_3_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Geometry__Group_2_3_0__0__Impl
	rule__Geometry__Group_2_3_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2_3_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeometryAccess().getTRIANGLE_STRIPSKeyword_2_3_0_0()); }
	'TRIANGLE_STRIPS'
	{ after(grammarAccess.getGeometryAccess().getTRIANGLE_STRIPSKeyword_2_3_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2_3_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Geometry__Group_2_3_0__1__Impl
	rule__Geometry__Group_2_3_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2_3_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeometryAccess().getINTTerminalRuleCall_2_3_0_1()); }
	RULE_INT
	{ after(grammarAccess.getGeometryAccess().getINTTerminalRuleCall_2_3_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2_3_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Geometry__Group_2_3_0__2__Impl
	rule__Geometry__Group_2_3_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2_3_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeometryAccess().getINTTerminalRuleCall_2_3_0_2()); }
	RULE_INT
	{ after(grammarAccess.getGeometryAccess().getINTTerminalRuleCall_2_3_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2_3_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Geometry__Group_2_3_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__Group_2_3_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGeometryAccess().getENDLINETerminalRuleCall_2_3_0_3()); }
	(RULE_ENDLINE)?
	{ after(grammarAccess.getGeometryAccess().getENDLINETerminalRuleCall_2_3_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VertexSource__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexSource__Group__0__Impl
	rule__VertexSource__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexSourceAccess().getVertexSourceAction_0()); }
	()
	{ after(grammarAccess.getVertexSourceAccess().getVertexSourceAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexSource__Group__1__Impl
	rule__VertexSource__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexSourceAccess().getGroup_1()); }
	(rule__VertexSource__Group_1__0)?
	{ after(grammarAccess.getVertexSourceAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexSource__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getVertexSourceAccess().getVerticesAssignment_2()); }
		(rule__VertexSource__VerticesAssignment_2)
		{ after(grammarAccess.getVertexSourceAccess().getVerticesAssignment_2()); }
	)
	(
		{ before(grammarAccess.getVertexSourceAccess().getVerticesAssignment_2()); }
		(rule__VertexSource__VerticesAssignment_2)*
		{ after(grammarAccess.getVertexSourceAccess().getVerticesAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VertexSource__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexSource__Group_1__0__Impl
	rule__VertexSource__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexSourceAccess().getPOINTSKeyword_1_0()); }
	'POINTS'
	{ after(grammarAccess.getVertexSourceAccess().getPOINTSKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexSource__Group_1__1__Impl
	rule__VertexSource__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexSourceAccess().getEStringParserRuleCall_1_1()); }
	(ruleEString)?
	{ after(grammarAccess.getVertexSourceAccess().getEStringParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VertexSource__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexSourceAccess().getENDLINETerminalRuleCall_1_2()); }
	(RULE_ENDLINE)?
	{ after(grammarAccess.getVertexSourceAccess().getENDLINETerminalRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Face__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Face__Group__0__Impl
	rule__Face__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFaceAccess().getFaceAction_0()); }
	()
	{ after(grammarAccess.getFaceAccess().getFaceAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Face__Group__1__Impl
	rule__Face__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFaceAccess().getEIntParserRuleCall_1()); }
	ruleEInt
	{ after(grammarAccess.getFaceAccess().getEIntParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Face__Group__2__Impl
	rule__Face__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getFaceAccess().getVertexIndicesAssignment_2()); }
		(rule__Face__VertexIndicesAssignment_2)
		{ after(grammarAccess.getFaceAccess().getVertexIndicesAssignment_2()); }
	)
	(
		{ before(grammarAccess.getFaceAccess().getVertexIndicesAssignment_2()); }
		(rule__Face__VertexIndicesAssignment_2)*
		{ after(grammarAccess.getFaceAccess().getVertexIndicesAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Face__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFaceAccess().getENDLINETerminalRuleCall_3()); }
	(RULE_ENDLINE)?
	{ after(grammarAccess.getFaceAccess().getENDLINETerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PolyShape__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyShape__Group__0__Impl
	rule__PolyShape__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPolyShapeAccess().getPolyShapeAction_0()); }
	()
	{ after(grammarAccess.getPolyShapeAccess().getPolyShapeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PolyShape__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getPolyShapeAccess().getFacesAssignment_1()); }
		(rule__PolyShape__FacesAssignment_1)
		{ after(grammarAccess.getPolyShapeAccess().getFacesAssignment_1()); }
	)
	(
		{ before(grammarAccess.getPolyShapeAccess().getFacesAssignment_1()); }
		(rule__PolyShape__FacesAssignment_1)*
		{ after(grammarAccess.getPolyShapeAccess().getFacesAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TriangleStripPolyShape__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TriangleStripPolyShape__Group__0__Impl
	rule__TriangleStripPolyShape__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TriangleStripPolyShape__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTriangleStripPolyShapeAccess().getTriangleStripPolyShapeAction_0()); }
	()
	{ after(grammarAccess.getTriangleStripPolyShapeAccess().getTriangleStripPolyShapeAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TriangleStripPolyShape__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TriangleStripPolyShape__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TriangleStripPolyShape__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getTriangleStripPolyShapeAccess().getFacesAssignment_1()); }
		(rule__TriangleStripPolyShape__FacesAssignment_1)
		{ after(grammarAccess.getTriangleStripPolyShapeAccess().getFacesAssignment_1()); }
	)
	(
		{ before(grammarAccess.getTriangleStripPolyShapeAccess().getFacesAssignment_1()); }
		(rule__TriangleStripPolyShape__FacesAssignment_1)*
		{ after(grammarAccess.getTriangleStripPolyShapeAccess().getFacesAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Vertex__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vertex__Group__0__Impl
	rule__Vertex__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexAccess().getVertexAction_0()); }
	()
	{ after(grammarAccess.getVertexAccess().getVertexAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vertex__Group__1__Impl
	rule__Vertex__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexAccess().getXAssignment_1()); }
	(rule__Vertex__XAssignment_1)
	{ after(grammarAccess.getVertexAccess().getXAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vertex__Group__2__Impl
	rule__Vertex__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexAccess().getYAssignment_2()); }
	(rule__Vertex__YAssignment_2)
	{ after(grammarAccess.getVertexAccess().getYAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vertex__Group__3__Impl
	rule__Vertex__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexAccess().getZAssignment_3()); }
	(rule__Vertex__ZAssignment_3)
	{ after(grammarAccess.getVertexAccess().getZAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vertex__Group__4__Impl
	rule__Vertex__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexAccess().getEIntParserRuleCall_4()); }
	(ruleEInt)?
	{ after(grammarAccess.getVertexAccess().getEIntParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vertex__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVertexAccess().getENDLINETerminalRuleCall_5()); }
	(RULE_ENDLINE)?
	{ after(grammarAccess.getVertexAccess().getENDLINETerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Geometry__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeometryAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getGeometryAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__VertexSourcesAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeometryAccess().getVertexSourcesVertexSourceParserRuleCall_2_1_0()); }
		ruleVertexSource
		{ after(grammarAccess.getGeometryAccess().getVertexSourcesVertexSourceParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__NodesAssignment_2_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeometryAccess().getNodesPolyShapeParserRuleCall_2_2_1_0()); }
		rulePolyShape
		{ after(grammarAccess.getGeometryAccess().getNodesPolyShapeParserRuleCall_2_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Geometry__NodesAssignment_2_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGeometryAccess().getNodesTriangleStripPolyShapeParserRuleCall_2_3_1_0()); }
		ruleTriangleStripPolyShape
		{ after(grammarAccess.getGeometryAccess().getNodesTriangleStripPolyShapeParserRuleCall_2_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VertexSource__VerticesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexSourceAccess().getVerticesVertexParserRuleCall_2_0()); }
		ruleVertex
		{ after(grammarAccess.getVertexSourceAccess().getVerticesVertexParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Face__VertexIndicesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFaceAccess().getVertexIndicesEIntParserRuleCall_2_0()); }
		ruleEInt
		{ after(grammarAccess.getFaceAccess().getVertexIndicesEIntParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PolyShape__FacesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPolyShapeAccess().getFacesFaceParserRuleCall_1_0()); }
		ruleFace
		{ after(grammarAccess.getPolyShapeAccess().getFacesFaceParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TriangleStripPolyShape__FacesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTriangleStripPolyShapeAccess().getFacesFaceParserRuleCall_1_0()); }
		ruleFace
		{ after(grammarAccess.getTriangleStripPolyShapeAccess().getFacesFaceParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__XAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexAccess().getXEDoubleParserRuleCall_1_0()); }
		ruleEDouble
		{ after(grammarAccess.getVertexAccess().getXEDoubleParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__YAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexAccess().getYEDoubleParserRuleCall_2_0()); }
		ruleEDouble
		{ after(grammarAccess.getVertexAccess().getYEDoubleParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vertex__ZAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVertexAccess().getZEDoubleParserRuleCall_3_0()); }
		ruleEDouble
		{ after(grammarAccess.getVertexAccess().getZEDoubleParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_DOUBLE : ('-'|'+')? RULE_INT? '.' RULE_INT (('E'|'e') ('-'|'+')? RULE_INT)?;

RULE_ENDLINE : ('\r'? '\n'|'\r');

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'ASCII'|'DATASET POLYDATA')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_ANY_OTHER : .;
