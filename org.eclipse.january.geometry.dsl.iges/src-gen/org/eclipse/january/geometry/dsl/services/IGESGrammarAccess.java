/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.january.geometry.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class IGESGrammarAccess extends AbstractGrammarElementFinder {
	
	public class IGESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.IGES.IGES");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStartStartParserRuleCall_0_0 = (RuleCall)cStartAssignment_0.eContents().get(0);
		private final Assignment cGlobalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGlobalGlobalParserRuleCall_1_0 = (RuleCall)cGlobalAssignment_1.eContents().get(0);
		private final Assignment cDataAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDataDataParserRuleCall_2_0 = (RuleCall)cDataAssignment_2.eContents().get(0);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersParametersParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Assignment cEndAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEndEndParserRuleCall_4_0 = (RuleCall)cEndAssignment_4.eContents().get(0);
		
		//IGES:
		//	start=Start global=Global data=Data parameters=Parameters end=End;
		@Override public ParserRule getRule() { return rule; }
		
		//start=Start global=Global data=Data parameters=Parameters end=End
		public Group getGroup() { return cGroup; }
		
		//start=Start
		public Assignment getStartAssignment_0() { return cStartAssignment_0; }
		
		//Start
		public RuleCall getStartStartParserRuleCall_0_0() { return cStartStartParserRuleCall_0_0; }
		
		//global=Global
		public Assignment getGlobalAssignment_1() { return cGlobalAssignment_1; }
		
		//Global
		public RuleCall getGlobalGlobalParserRuleCall_1_0() { return cGlobalGlobalParserRuleCall_1_0; }
		
		//data=Data
		public Assignment getDataAssignment_2() { return cDataAssignment_2; }
		
		//Data
		public RuleCall getDataDataParserRuleCall_2_0() { return cDataDataParserRuleCall_2_0; }
		
		//parameters=Parameters
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }
		
		//Parameters
		public RuleCall getParametersParametersParserRuleCall_3_0() { return cParametersParametersParserRuleCall_3_0; }
		
		//end=End
		public Assignment getEndAssignment_4() { return cEndAssignment_4; }
		
		//End
		public RuleCall getEndEndParserRuleCall_4_0() { return cEndEndParserRuleCall_4_0; }
	}
	public class StartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.IGES.Start");
		private final Assignment cLinesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLinesStartLineParserRuleCall_0 = (RuleCall)cLinesAssignment.eContents().get(0);
		
		//Start:
		//	lines+=startLine+;
		@Override public ParserRule getRule() { return rule; }
		
		//lines+=startLine+
		public Assignment getLinesAssignment() { return cLinesAssignment; }
		
		//startLine
		public RuleCall getLinesStartLineParserRuleCall_0() { return cLinesStartLineParserRuleCall_0; }
	}
	public class GlobalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.IGES.Global");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDELIMITERTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cHStringParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cDELIMITERTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cValuesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cValuesValueParserRuleCall_3_0_0 = (RuleCall)cValuesAssignment_3_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cGKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final RuleCall cWSTerminalRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_3_4 = (RuleCall)cGroup_3.eContents().get(4);
		private final RuleCall cENDLINETerminalRuleCall_3_5 = (RuleCall)cGroup_3.eContents().get(5);
		private final Assignment cValuesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuesValueParserRuleCall_4_0 = (RuleCall)cValuesAssignment_4.eContents().get(0);
		private final RuleCall cSEPARATORTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cWSTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cGKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cWSTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final RuleCall cINTTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final RuleCall cENDLINETerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		
		//Global:
		//	DELIMITER? HString? DELIMITER? (values+=Value+ WS? 'G' WS? INT ENDLINE)+ values+=Value* SEPARATOR WS? 'G' WS? INT
		//	ENDLINE;
		@Override public ParserRule getRule() { return rule; }
		
		//DELIMITER? HString? DELIMITER? (values+=Value+ WS? 'G' WS? INT ENDLINE)+ values+=Value* SEPARATOR WS? 'G' WS? INT
		//ENDLINE
		public Group getGroup() { return cGroup; }
		
		//DELIMITER?
		public RuleCall getDELIMITERTerminalRuleCall_0() { return cDELIMITERTerminalRuleCall_0; }
		
		//HString?
		public RuleCall getHStringParserRuleCall_1() { return cHStringParserRuleCall_1; }
		
		//DELIMITER?
		public RuleCall getDELIMITERTerminalRuleCall_2() { return cDELIMITERTerminalRuleCall_2; }
		
		//(values+=Value+ WS? 'G' WS? INT ENDLINE)+
		public Group getGroup_3() { return cGroup_3; }
		
		//values+=Value+
		public Assignment getValuesAssignment_3_0() { return cValuesAssignment_3_0; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_3_0_0() { return cValuesValueParserRuleCall_3_0_0; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_3_1() { return cWSTerminalRuleCall_3_1; }
		
		//'G'
		public Keyword getGKeyword_3_2() { return cGKeyword_3_2; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_3_3() { return cWSTerminalRuleCall_3_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3_4() { return cINTTerminalRuleCall_3_4; }
		
		//ENDLINE
		public RuleCall getENDLINETerminalRuleCall_3_5() { return cENDLINETerminalRuleCall_3_5; }
		
		//values+=Value*
		public Assignment getValuesAssignment_4() { return cValuesAssignment_4; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_4_0() { return cValuesValueParserRuleCall_4_0; }
		
		//SEPARATOR
		public RuleCall getSEPARATORTerminalRuleCall_5() { return cSEPARATORTerminalRuleCall_5; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_6() { return cWSTerminalRuleCall_6; }
		
		//'G'
		public Keyword getGKeyword_7() { return cGKeyword_7; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_8() { return cWSTerminalRuleCall_8; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_9() { return cINTTerminalRuleCall_9; }
		
		//ENDLINE
		public RuleCall getENDLINETerminalRuleCall_10() { return cENDLINETerminalRuleCall_10; }
	}
	public class DataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.IGES.Data");
		private final Assignment cEntriesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEntriesEntryParserRuleCall_0 = (RuleCall)cEntriesAssignment.eContents().get(0);
		
		//Data:
		//	entries+=Entry+;
		@Override public ParserRule getRule() { return rule; }
		
		//entries+=Entry+
		public Assignment getEntriesAssignment() { return cEntriesAssignment; }
		
		//Entry
		public RuleCall getEntriesEntryParserRuleCall_0() { return cEntriesEntryParserRuleCall_0; }
	}
	public class EntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.IGES.Entry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeINTTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cParamDataAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParamDataINTTerminalRuleCall_3_0 = (RuleCall)cParamDataAssignment_3.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cStructureAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStructureINTTerminalRuleCall_5_0 = (RuleCall)cStructureAssignment_5.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cLineFontAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLineFontINTTerminalRuleCall_7_0 = (RuleCall)cLineFontAssignment_7.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cLevelAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cLevelINTTerminalRuleCall_9_0 = (RuleCall)cLevelAssignment_9.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final Assignment cViewAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cViewINTTerminalRuleCall_11_0 = (RuleCall)cViewAssignment_11.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		private final Assignment cTransformMatrixAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cTransformMatrixINTTerminalRuleCall_13_0 = (RuleCall)cTransformMatrixAssignment_13.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_14 = (RuleCall)cGroup.eContents().get(14);
		private final RuleCall cINTTerminalRuleCall_15 = (RuleCall)cGroup.eContents().get(15);
		private final RuleCall cWSTerminalRuleCall_16 = (RuleCall)cGroup.eContents().get(16);
		private final Assignment cStatusAssignment_17 = (Assignment)cGroup.eContents().get(17);
		private final RuleCall cStatusINTTerminalRuleCall_17_0 = (RuleCall)cStatusAssignment_17.eContents().get(0);
		private final Keyword cDKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final RuleCall cWSTerminalRuleCall_19 = (RuleCall)cGroup.eContents().get(19);
		private final Assignment cIndexAssignment_20 = (Assignment)cGroup.eContents().get(20);
		private final RuleCall cIndexINTTerminalRuleCall_20_0 = (RuleCall)cIndexAssignment_20.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_21 = (RuleCall)cGroup.eContents().get(21);
		private final RuleCall cWSTerminalRuleCall_22 = (RuleCall)cGroup.eContents().get(22);
		private final RuleCall cINTTerminalRuleCall_23 = (RuleCall)cGroup.eContents().get(23);
		private final RuleCall cWSTerminalRuleCall_24 = (RuleCall)cGroup.eContents().get(24);
		private final Assignment cLineWeightAssignment_25 = (Assignment)cGroup.eContents().get(25);
		private final RuleCall cLineWeightINTTerminalRuleCall_25_0 = (RuleCall)cLineWeightAssignment_25.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_26 = (RuleCall)cGroup.eContents().get(26);
		private final Assignment cColorAssignment_27 = (Assignment)cGroup.eContents().get(27);
		private final RuleCall cColorINTTerminalRuleCall_27_0 = (RuleCall)cColorAssignment_27.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_28 = (RuleCall)cGroup.eContents().get(28);
		private final Assignment cParamLinesAssignment_29 = (Assignment)cGroup.eContents().get(29);
		private final RuleCall cParamLinesINTTerminalRuleCall_29_0 = (RuleCall)cParamLinesAssignment_29.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_30 = (RuleCall)cGroup.eContents().get(30);
		private final Assignment cFormAssignment_31 = (Assignment)cGroup.eContents().get(31);
		private final RuleCall cFormINTTerminalRuleCall_31_0 = (RuleCall)cFormAssignment_31.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_32 = (RuleCall)cGroup.eContents().get(32);
		private final Group cGroup_33 = (Group)cGroup.eContents().get(33);
		private final RuleCall cINTTerminalRuleCall_33_0 = (RuleCall)cGroup_33.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_33_1 = (RuleCall)cGroup_33.eContents().get(1);
		private final Group cGroup_34 = (Group)cGroup.eContents().get(34);
		private final RuleCall cINTTerminalRuleCall_34_0 = (RuleCall)cGroup_34.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_34_1 = (RuleCall)cGroup_34.eContents().get(1);
		private final Alternatives cAlternatives_35 = (Alternatives)cGroup.eContents().get(35);
		private final Assignment cEntityLabelAssignment_35_0 = (Assignment)cAlternatives_35.eContents().get(0);
		private final RuleCall cEntityLabelSTRINGTerminalRuleCall_35_0_0 = (RuleCall)cEntityLabelAssignment_35_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_35_1 = (RuleCall)cAlternatives_35.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_36 = (RuleCall)cGroup.eContents().get(36);
		private final Assignment cSubNumAssignment_37 = (Assignment)cGroup.eContents().get(37);
		private final RuleCall cSubNumINTTerminalRuleCall_37_0 = (RuleCall)cSubNumAssignment_37.eContents().get(0);
		private final Keyword cDKeyword_38 = (Keyword)cGroup.eContents().get(38);
		private final RuleCall cWSTerminalRuleCall_39 = (RuleCall)cGroup.eContents().get(39);
		private final RuleCall cINTTerminalRuleCall_40 = (RuleCall)cGroup.eContents().get(40);
		private final RuleCall cENDLINETerminalRuleCall_41 = (RuleCall)cGroup.eContents().get(41);
		
		//Entry:
		//	WS type=INT WS? paramData=INT WS? structure=INT WS? lineFont=INT WS? level=INT WS? view=INT WS? TransformMatrix=INT
		//	WS? INT? WS? status=INT 'D' WS? index=INT ENDLINE WS? INT WS? lineWeight=INT WS? color=INT WS? paramLines=INT WS?
		//	form=INT WS? (INT WS?)? (INT WS?)? (entityLabel=STRING | INT)? WS? subNum=INT? 'D' WS? INT ENDLINE;
		@Override public ParserRule getRule() { return rule; }
		
		//WS type=INT WS? paramData=INT WS? structure=INT WS? lineFont=INT WS? level=INT WS? view=INT WS? TransformMatrix=INT WS?
		//INT? WS? status=INT 'D' WS? index=INT ENDLINE WS? INT WS? lineWeight=INT WS? color=INT WS? paramLines=INT WS? form=INT
		//WS? (INT WS?)? (INT WS?)? (entityLabel=STRING | INT)? WS? subNum=INT? 'D' WS? INT ENDLINE
		public Group getGroup() { return cGroup; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }
		
		//type=INT
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//INT
		public RuleCall getTypeINTTerminalRuleCall_1_0() { return cTypeINTTerminalRuleCall_1_0; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }
		
		//paramData=INT
		public Assignment getParamDataAssignment_3() { return cParamDataAssignment_3; }
		
		//INT
		public RuleCall getParamDataINTTerminalRuleCall_3_0() { return cParamDataINTTerminalRuleCall_3_0; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }
		
		//structure=INT
		public Assignment getStructureAssignment_5() { return cStructureAssignment_5; }
		
		//INT
		public RuleCall getStructureINTTerminalRuleCall_5_0() { return cStructureINTTerminalRuleCall_5_0; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_6() { return cWSTerminalRuleCall_6; }
		
		//lineFont=INT
		public Assignment getLineFontAssignment_7() { return cLineFontAssignment_7; }
		
		//INT
		public RuleCall getLineFontINTTerminalRuleCall_7_0() { return cLineFontINTTerminalRuleCall_7_0; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_8() { return cWSTerminalRuleCall_8; }
		
		//level=INT
		public Assignment getLevelAssignment_9() { return cLevelAssignment_9; }
		
		//INT
		public RuleCall getLevelINTTerminalRuleCall_9_0() { return cLevelINTTerminalRuleCall_9_0; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_10() { return cWSTerminalRuleCall_10; }
		
		//view=INT
		public Assignment getViewAssignment_11() { return cViewAssignment_11; }
		
		//INT
		public RuleCall getViewINTTerminalRuleCall_11_0() { return cViewINTTerminalRuleCall_11_0; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_12() { return cWSTerminalRuleCall_12; }
		
		//TransformMatrix=INT
		public Assignment getTransformMatrixAssignment_13() { return cTransformMatrixAssignment_13; }
		
		//INT
		public RuleCall getTransformMatrixINTTerminalRuleCall_13_0() { return cTransformMatrixINTTerminalRuleCall_13_0; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_14() { return cWSTerminalRuleCall_14; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_15() { return cINTTerminalRuleCall_15; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_16() { return cWSTerminalRuleCall_16; }
		
		//status=INT
		public Assignment getStatusAssignment_17() { return cStatusAssignment_17; }
		
		//INT
		public RuleCall getStatusINTTerminalRuleCall_17_0() { return cStatusINTTerminalRuleCall_17_0; }
		
		//'D'
		public Keyword getDKeyword_18() { return cDKeyword_18; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_19() { return cWSTerminalRuleCall_19; }
		
		//index=INT
		public Assignment getIndexAssignment_20() { return cIndexAssignment_20; }
		
		//INT
		public RuleCall getIndexINTTerminalRuleCall_20_0() { return cIndexINTTerminalRuleCall_20_0; }
		
		//ENDLINE
		public RuleCall getENDLINETerminalRuleCall_21() { return cENDLINETerminalRuleCall_21; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_22() { return cWSTerminalRuleCall_22; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_23() { return cINTTerminalRuleCall_23; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_24() { return cWSTerminalRuleCall_24; }
		
		//lineWeight=INT
		public Assignment getLineWeightAssignment_25() { return cLineWeightAssignment_25; }
		
		//INT
		public RuleCall getLineWeightINTTerminalRuleCall_25_0() { return cLineWeightINTTerminalRuleCall_25_0; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_26() { return cWSTerminalRuleCall_26; }
		
		//color=INT
		public Assignment getColorAssignment_27() { return cColorAssignment_27; }
		
		//INT
		public RuleCall getColorINTTerminalRuleCall_27_0() { return cColorINTTerminalRuleCall_27_0; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_28() { return cWSTerminalRuleCall_28; }
		
		//paramLines=INT
		public Assignment getParamLinesAssignment_29() { return cParamLinesAssignment_29; }
		
		//INT
		public RuleCall getParamLinesINTTerminalRuleCall_29_0() { return cParamLinesINTTerminalRuleCall_29_0; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_30() { return cWSTerminalRuleCall_30; }
		
		//form=INT
		public Assignment getFormAssignment_31() { return cFormAssignment_31; }
		
		//INT
		public RuleCall getFormINTTerminalRuleCall_31_0() { return cFormINTTerminalRuleCall_31_0; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_32() { return cWSTerminalRuleCall_32; }
		
		//(INT WS?)?
		public Group getGroup_33() { return cGroup_33; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_33_0() { return cINTTerminalRuleCall_33_0; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_33_1() { return cWSTerminalRuleCall_33_1; }
		
		//(INT WS?)?
		public Group getGroup_34() { return cGroup_34; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_34_0() { return cINTTerminalRuleCall_34_0; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_34_1() { return cWSTerminalRuleCall_34_1; }
		
		//(entityLabel=STRING | INT)?
		public Alternatives getAlternatives_35() { return cAlternatives_35; }
		
		//entityLabel=STRING
		public Assignment getEntityLabelAssignment_35_0() { return cEntityLabelAssignment_35_0; }
		
		//STRING
		public RuleCall getEntityLabelSTRINGTerminalRuleCall_35_0_0() { return cEntityLabelSTRINGTerminalRuleCall_35_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_35_1() { return cINTTerminalRuleCall_35_1; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_36() { return cWSTerminalRuleCall_36; }
		
		//subNum=INT?
		public Assignment getSubNumAssignment_37() { return cSubNumAssignment_37; }
		
		//INT
		public RuleCall getSubNumINTTerminalRuleCall_37_0() { return cSubNumINTTerminalRuleCall_37_0; }
		
		//'D'
		public Keyword getDKeyword_38() { return cDKeyword_38; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_39() { return cWSTerminalRuleCall_39; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_40() { return cINTTerminalRuleCall_40; }
		
		//ENDLINE
		public RuleCall getENDLINETerminalRuleCall_41() { return cENDLINETerminalRuleCall_41; }
	}
	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.IGES.Parameters");
		private final Assignment cEntriesAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cEntriesAlternatives_0 = (Alternatives)cEntriesAssignment.eContents().get(0);
		private final RuleCall cEntriesPMultiEntryParserRuleCall_0_0 = (RuleCall)cEntriesAlternatives_0.eContents().get(0);
		private final RuleCall cEntriesPEntryParserRuleCall_0_1 = (RuleCall)cEntriesAlternatives_0.eContents().get(1);
		
		//Parameters:
		//	entries+=(PMultiEntry | PEntry)+;
		@Override public ParserRule getRule() { return rule; }
		
		//entries+=(PMultiEntry | PEntry)+
		public Assignment getEntriesAssignment() { return cEntriesAssignment; }
		
		//(PMultiEntry | PEntry)
		public Alternatives getEntriesAlternatives_0() { return cEntriesAlternatives_0; }
		
		//PMultiEntry
		public RuleCall getEntriesPMultiEntryParserRuleCall_0_0() { return cEntriesPMultiEntryParserRuleCall_0_0; }
		
		//PEntry
		public RuleCall getEntriesPEntryParserRuleCall_0_1() { return cEntriesPEntryParserRuleCall_0_1; }
	}
	public class PEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.IGES.PEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeINTTerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cDELIMITERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesValueParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final RuleCall cSEPARATORTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cDIndexAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDIndexINTTerminalRuleCall_5_0 = (RuleCall)cDIndexAssignment_5.eContents().get(0);
		private final Keyword cPKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cWSTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cIndiciesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cIndiciesINTTerminalRuleCall_8_0 = (RuleCall)cIndiciesAssignment_8.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//PEntry:
		//	type=INT DELIMITER? values+=Value* SEPARATOR WS? dIndex=INT 'P' WS? indicies+=INT ENDLINE;
		@Override public ParserRule getRule() { return rule; }
		
		//type=INT DELIMITER? values+=Value* SEPARATOR WS? dIndex=INT 'P' WS? indicies+=INT ENDLINE
		public Group getGroup() { return cGroup; }
		
		//type=INT
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//INT
		public RuleCall getTypeINTTerminalRuleCall_0_0() { return cTypeINTTerminalRuleCall_0_0; }
		
		//DELIMITER?
		public RuleCall getDELIMITERTerminalRuleCall_1() { return cDELIMITERTerminalRuleCall_1; }
		
		//values+=Value*
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_2_0() { return cValuesValueParserRuleCall_2_0; }
		
		//SEPARATOR
		public RuleCall getSEPARATORTerminalRuleCall_3() { return cSEPARATORTerminalRuleCall_3; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }
		
		//dIndex=INT
		public Assignment getDIndexAssignment_5() { return cDIndexAssignment_5; }
		
		//INT
		public RuleCall getDIndexINTTerminalRuleCall_5_0() { return cDIndexINTTerminalRuleCall_5_0; }
		
		//'P'
		public Keyword getPKeyword_6() { return cPKeyword_6; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_7() { return cWSTerminalRuleCall_7; }
		
		//indicies+=INT
		public Assignment getIndiciesAssignment_8() { return cIndiciesAssignment_8; }
		
		//INT
		public RuleCall getIndiciesINTTerminalRuleCall_8_0() { return cIndiciesINTTerminalRuleCall_8_0; }
		
		//ENDLINE
		public RuleCall getENDLINETerminalRuleCall_9() { return cENDLINETerminalRuleCall_9; }
	}
	public class PMultiEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.IGES.PMultiEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeINTTerminalRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cDELIMITERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValuesValueParserRuleCall_2_0_0 = (RuleCall)cValuesAssignment_2_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cDIndexAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cDIndexINTTerminalRuleCall_2_2_0 = (RuleCall)cDIndexAssignment_2_2.eContents().get(0);
		private final Keyword cPKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_2_4 = (RuleCall)cGroup_2.eContents().get(4);
		private final Assignment cIndiciesAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cIndiciesINTTerminalRuleCall_2_5_0 = (RuleCall)cIndiciesAssignment_2_5.eContents().get(0);
		private final RuleCall cENDLINETerminalRuleCall_2_6 = (RuleCall)cGroup_2.eContents().get(6);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesValueParserRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		private final RuleCall cSEPARATORTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cWSTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cINTTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Keyword cPKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final RuleCall cWSTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final RuleCall cINTTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final RuleCall cENDLINETerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		
		//PMultiEntry PEntry:
		//	type=INT DELIMITER? (values+=Value* WS? dIndex=INT 'P' WS? indicies+=INT ENDLINE)+ values+=Value* SEPARATOR WS? INT
		//	'P' WS? INT ENDLINE
		@Override public ParserRule getRule() { return rule; }
		
		//type=INT DELIMITER? (values+=Value* WS? dIndex=INT 'P' WS? indicies+=INT ENDLINE)+ values+=Value* SEPARATOR WS? INT 'P'
		//WS? INT ENDLINE
		public Group getGroup() { return cGroup; }
		
		//type=INT
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//INT
		public RuleCall getTypeINTTerminalRuleCall_0_0() { return cTypeINTTerminalRuleCall_0_0; }
		
		//DELIMITER?
		public RuleCall getDELIMITERTerminalRuleCall_1() { return cDELIMITERTerminalRuleCall_1; }
		
		//(values+=Value* WS? dIndex=INT 'P' WS? indicies+=INT ENDLINE)+
		public Group getGroup_2() { return cGroup_2; }
		
		//values+=Value*
		public Assignment getValuesAssignment_2_0() { return cValuesAssignment_2_0; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_2_0_0() { return cValuesValueParserRuleCall_2_0_0; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_2_1() { return cWSTerminalRuleCall_2_1; }
		
		//dIndex=INT
		public Assignment getDIndexAssignment_2_2() { return cDIndexAssignment_2_2; }
		
		//INT
		public RuleCall getDIndexINTTerminalRuleCall_2_2_0() { return cDIndexINTTerminalRuleCall_2_2_0; }
		
		//'P'
		public Keyword getPKeyword_2_3() { return cPKeyword_2_3; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_2_4() { return cWSTerminalRuleCall_2_4; }
		
		//indicies+=INT
		public Assignment getIndiciesAssignment_2_5() { return cIndiciesAssignment_2_5; }
		
		//INT
		public RuleCall getIndiciesINTTerminalRuleCall_2_5_0() { return cIndiciesINTTerminalRuleCall_2_5_0; }
		
		//ENDLINE
		public RuleCall getENDLINETerminalRuleCall_2_6() { return cENDLINETerminalRuleCall_2_6; }
		
		//values+=Value*
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }
		
		//Value
		public RuleCall getValuesValueParserRuleCall_3_0() { return cValuesValueParserRuleCall_3_0; }
		
		//SEPARATOR
		public RuleCall getSEPARATORTerminalRuleCall_4() { return cSEPARATORTerminalRuleCall_4; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_5() { return cWSTerminalRuleCall_5; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_6() { return cINTTerminalRuleCall_6; }
		
		//'P'
		public Keyword getPKeyword_7() { return cPKeyword_7; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_8() { return cWSTerminalRuleCall_8; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_9() { return cINTTerminalRuleCall_9; }
		
		//ENDLINE
		public RuleCall getENDLINETerminalRuleCall_10() { return cENDLINETerminalRuleCall_10; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.IGES.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParamParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPointerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHStringParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value:
		//	Param | Pointer | HString;
		@Override public ParserRule getRule() { return rule; }
		
		//Param | Pointer | HString
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Param
		public RuleCall getParamParserRuleCall_0() { return cParamParserRuleCall_0; }
		
		//Pointer
		public RuleCall getPointerParserRuleCall_1() { return cPointerParserRuleCall_1; }
		
		//HString
		public RuleCall getHStringParserRuleCall_2() { return cHStringParserRuleCall_2; }
	}
	public class HStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.IGES.HString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValHOLLERITHTerminalRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final RuleCall cDELIMITERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//HString:
		//	val=HOLLERITH DELIMITER?;
		@Override public ParserRule getRule() { return rule; }
		
		//val=HOLLERITH DELIMITER?
		public Group getGroup() { return cGroup; }
		
		//val=HOLLERITH
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//HOLLERITH
		public RuleCall getValHOLLERITHTerminalRuleCall_0_0() { return cValHOLLERITHTerminalRuleCall_0_0; }
		
		//DELIMITER?
		public RuleCall getDELIMITERTerminalRuleCall_1() { return cDELIMITERTerminalRuleCall_1; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.IGES.Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValDOUBLETerminalRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final RuleCall cDELIMITERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Param:
		//	val=DOUBLE DELIMITER?;
		@Override public ParserRule getRule() { return rule; }
		
		//val=DOUBLE DELIMITER?
		public Group getGroup() { return cGroup; }
		
		//val=DOUBLE
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//DOUBLE
		public RuleCall getValDOUBLETerminalRuleCall_0_0() { return cValDOUBLETerminalRuleCall_0_0; }
		
		//DELIMITER?
		public RuleCall getDELIMITERTerminalRuleCall_1() { return cDELIMITERTerminalRuleCall_1; }
	}
	public class PointerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.IGES.Pointer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValINTTerminalRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final RuleCall cDELIMITERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Pointer:
		//	val=INT DELIMITER?;
		@Override public ParserRule getRule() { return rule; }
		
		//val=INT DELIMITER?
		public Group getGroup() { return cGroup; }
		
		//val=INT
		public Assignment getValAssignment_0() { return cValAssignment_0; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0_0() { return cValINTTerminalRuleCall_0_0; }
		
		//DELIMITER?
		public RuleCall getDELIMITERTerminalRuleCall_1() { return cDELIMITERTerminalRuleCall_1; }
	}
	public class EndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.IGES.End");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cSvalAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSvalINTTerminalRuleCall_2_0 = (RuleCall)cSvalAssignment_2.eContents().get(0);
		private final Keyword cGKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cWSTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cGvalAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cGvalINTTerminalRuleCall_5_0 = (RuleCall)cGvalAssignment_5.eContents().get(0);
		private final Keyword cDKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cWSTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cDvalAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDvalINTTerminalRuleCall_8_0 = (RuleCall)cDvalAssignment_8.eContents().get(0);
		private final Keyword cPKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final RuleCall cWSTerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final Assignment cPvalAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cPvalINTTerminalRuleCall_11_0 = (RuleCall)cPvalAssignment_11.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		private final Keyword cTKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final RuleCall cWSTerminalRuleCall_14 = (RuleCall)cGroup.eContents().get(14);
		private final Assignment cTvalAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cTvalINTTerminalRuleCall_15_0 = (RuleCall)cTvalAssignment_15.eContents().get(0);
		
		//End:
		//	'S' WS? sval=INT 'G' WS? gval=INT 'D' WS? dval=INT 'P' WS? pval=INT WS 'T' WS? tval=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'S' WS? sval=INT 'G' WS? gval=INT 'D' WS? dval=INT 'P' WS? pval=INT WS 'T' WS? tval=INT
		public Group getGroup() { return cGroup; }
		
		//'S'
		public Keyword getSKeyword_0() { return cSKeyword_0; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }
		
		//sval=INT
		public Assignment getSvalAssignment_2() { return cSvalAssignment_2; }
		
		//INT
		public RuleCall getSvalINTTerminalRuleCall_2_0() { return cSvalINTTerminalRuleCall_2_0; }
		
		//'G'
		public Keyword getGKeyword_3() { return cGKeyword_3; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_4() { return cWSTerminalRuleCall_4; }
		
		//gval=INT
		public Assignment getGvalAssignment_5() { return cGvalAssignment_5; }
		
		//INT
		public RuleCall getGvalINTTerminalRuleCall_5_0() { return cGvalINTTerminalRuleCall_5_0; }
		
		//'D'
		public Keyword getDKeyword_6() { return cDKeyword_6; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_7() { return cWSTerminalRuleCall_7; }
		
		//dval=INT
		public Assignment getDvalAssignment_8() { return cDvalAssignment_8; }
		
		//INT
		public RuleCall getDvalINTTerminalRuleCall_8_0() { return cDvalINTTerminalRuleCall_8_0; }
		
		//'P'
		public Keyword getPKeyword_9() { return cPKeyword_9; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_10() { return cWSTerminalRuleCall_10; }
		
		//pval=INT
		public Assignment getPvalAssignment_11() { return cPvalAssignment_11; }
		
		//INT
		public RuleCall getPvalINTTerminalRuleCall_11_0() { return cPvalINTTerminalRuleCall_11_0; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_12() { return cWSTerminalRuleCall_12; }
		
		//'T'
		public Keyword getTKeyword_13() { return cTKeyword_13; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_14() { return cWSTerminalRuleCall_14; }
		
		//tval=INT
		public Assignment getTvalAssignment_15() { return cTvalAssignment_15; }
		
		//INT
		public RuleCall getTvalINTTerminalRuleCall_15_0() { return cTvalINTTerminalRuleCall_15_0; }
	}
	public class StartLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.IGES.startLine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cSKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cENDLINETerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//startLine:
		//	(STRING | WS)* 'S' WS? INT ENDLINE;
		@Override public ParserRule getRule() { return rule; }
		
		//(STRING | WS)* 'S' WS? INT ENDLINE
		public Group getGroup() { return cGroup; }
		
		//(STRING | WS)*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_0() { return cSTRINGTerminalRuleCall_0_0; }
		
		//WS
		public RuleCall getWSTerminalRuleCall_0_1() { return cWSTerminalRuleCall_0_1; }
		
		//'S'
		public Keyword getSKeyword_1() { return cSKeyword_1; }
		
		//WS?
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//ENDLINE
		public RuleCall getENDLINETerminalRuleCall_4() { return cENDLINETerminalRuleCall_4; }
	}
	
	
	private final IGESElements pIGES;
	private final StartElements pStart;
	private final GlobalElements pGlobal;
	private final DataElements pData;
	private final EntryElements pEntry;
	private final ParametersElements pParameters;
	private final PEntryElements pPEntry;
	private final PMultiEntryElements pPMultiEntry;
	private final ValueElements pValue;
	private final HStringElements pHString;
	private final ParamElements pParam;
	private final PointerElements pPointer;
	private final EndElements pEnd;
	private final StartLineElements pStartLine;
	private final TerminalRule tINT;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tHOLLERITH;
	private final TerminalRule tSTRING;
	private final TerminalRule tWS;
	private final TerminalRule tENDLINE;
	private final TerminalRule tDELIMITER;
	private final TerminalRule tSEPARATOR;
	
	private final Grammar grammar;

	@Inject
	public IGESGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pIGES = new IGESElements();
		this.pStart = new StartElements();
		this.pGlobal = new GlobalElements();
		this.pData = new DataElements();
		this.pEntry = new EntryElements();
		this.pParameters = new ParametersElements();
		this.pPEntry = new PEntryElements();
		this.pPMultiEntry = new PMultiEntryElements();
		this.pValue = new ValueElements();
		this.pHString = new HStringElements();
		this.pParam = new ParamElements();
		this.pPointer = new PointerElements();
		this.pEnd = new EndElements();
		this.pStartLine = new StartLineElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.IGES.INT");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.IGES.DOUBLE");
		this.tHOLLERITH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.IGES.HOLLERITH");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.IGES.STRING");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.IGES.WS");
		this.tENDLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.IGES.ENDLINE");
		this.tDELIMITER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.IGES.DELIMITER");
		this.tSEPARATOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.january.geometry.xtext.IGES.SEPARATOR");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.january.geometry.xtext.IGES".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//IGES:
	//	start=Start global=Global data=Data parameters=Parameters end=End;
	public IGESElements getIGESAccess() {
		return pIGES;
	}
	
	public ParserRule getIGESRule() {
		return getIGESAccess().getRule();
	}
	
	//Start:
	//	lines+=startLine+;
	public StartElements getStartAccess() {
		return pStart;
	}
	
	public ParserRule getStartRule() {
		return getStartAccess().getRule();
	}
	
	//Global:
	//	DELIMITER? HString? DELIMITER? (values+=Value+ WS? 'G' WS? INT ENDLINE)+ values+=Value* SEPARATOR WS? 'G' WS? INT
	//	ENDLINE;
	public GlobalElements getGlobalAccess() {
		return pGlobal;
	}
	
	public ParserRule getGlobalRule() {
		return getGlobalAccess().getRule();
	}
	
	//Data:
	//	entries+=Entry+;
	public DataElements getDataAccess() {
		return pData;
	}
	
	public ParserRule getDataRule() {
		return getDataAccess().getRule();
	}
	
	//Entry:
	//	WS type=INT WS? paramData=INT WS? structure=INT WS? lineFont=INT WS? level=INT WS? view=INT WS? TransformMatrix=INT
	//	WS? INT? WS? status=INT 'D' WS? index=INT ENDLINE WS? INT WS? lineWeight=INT WS? color=INT WS? paramLines=INT WS?
	//	form=INT WS? (INT WS?)? (INT WS?)? (entityLabel=STRING | INT)? WS? subNum=INT? 'D' WS? INT ENDLINE;
	public EntryElements getEntryAccess() {
		return pEntry;
	}
	
	public ParserRule getEntryRule() {
		return getEntryAccess().getRule();
	}
	
	//Parameters:
	//	entries+=(PMultiEntry | PEntry)+;
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}
	
	//PEntry:
	//	type=INT DELIMITER? values+=Value* SEPARATOR WS? dIndex=INT 'P' WS? indicies+=INT ENDLINE;
	public PEntryElements getPEntryAccess() {
		return pPEntry;
	}
	
	public ParserRule getPEntryRule() {
		return getPEntryAccess().getRule();
	}
	
	//PMultiEntry PEntry:
	//	type=INT DELIMITER? (values+=Value* WS? dIndex=INT 'P' WS? indicies+=INT ENDLINE)+ values+=Value* SEPARATOR WS? INT
	//	'P' WS? INT ENDLINE
	public PMultiEntryElements getPMultiEntryAccess() {
		return pPMultiEntry;
	}
	
	public ParserRule getPMultiEntryRule() {
		return getPMultiEntryAccess().getRule();
	}
	
	//Value:
	//	Param | Pointer | HString;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//HString:
	//	val=HOLLERITH DELIMITER?;
	public HStringElements getHStringAccess() {
		return pHString;
	}
	
	public ParserRule getHStringRule() {
		return getHStringAccess().getRule();
	}
	
	//Param:
	//	val=DOUBLE DELIMITER?;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	//Pointer:
	//	val=INT DELIMITER?;
	public PointerElements getPointerAccess() {
		return pPointer;
	}
	
	public ParserRule getPointerRule() {
		return getPointerAccess().getRule();
	}
	
	//End:
	//	'S' WS? sval=INT 'G' WS? gval=INT 'D' WS? dval=INT 'P' WS? pval=INT WS 'T' WS? tval=INT;
	public EndElements getEndAccess() {
		return pEnd;
	}
	
	public ParserRule getEndRule() {
		return getEndAccess().getRule();
	}
	
	//startLine:
	//	(STRING | WS)* 'S' WS? INT ENDLINE;
	public StartLineElements getStartLineAccess() {
		return pStartLine;
	}
	
	public ParserRule getStartLineRule() {
		return getStartLineAccess().getRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	('+' | '-')? INT '.' INT? (('e' | 'E') ('+' | '-')? INT)?;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal HOLLERITH:
	//	INT 'H' .;
	public TerminalRule getHOLLERITHRule() {
		return tHOLLERITH;
	}
	
	//terminal STRING:
	//	'A..Z' | 'a'..'z' | '0'..'9' | '"'+;
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ENDLINE:
	//	'\r'? '\n';
	public TerminalRule getENDLINERule() {
		return tENDLINE;
	}
	
	//terminal DELIMITER:
	//	.;
	public TerminalRule getDELIMITERRule() {
		return tDELIMITER;
	}
	
	//terminal SEPARATOR:
	//	.;
	public TerminalRule getSEPARATORRule() {
		return tSEPARATOR;
	}
}
