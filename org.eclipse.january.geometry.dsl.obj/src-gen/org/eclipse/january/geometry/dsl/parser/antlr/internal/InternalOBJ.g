/*
 * generated by Xtext 2.10.0
 */
grammar InternalOBJ;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.eclipse.january.geometry.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.january.geometry.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.january.geometry.xtext.services.OBJGrammarAccess;

}

@parser::members {

 	private OBJGrammarAccess grammarAccess;

    public InternalOBJParser(TokenStream input, OBJGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Geometry";
   	}

   	@Override
   	protected OBJGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleGeometry
entryRuleGeometry returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGeometryRule()); }
	iv_ruleGeometry=ruleGeometry
	{ $current=$iv_ruleGeometry.current; }
	EOF;

// Rule Geometry
ruleGeometry returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getGeometryAccess().getVertexSourcesVertexSourceParserRuleCall_0_0());
				}
				lv_vertexSources_0_0=ruleVertexSource
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGeometryRule());
					}
					add(
						$current,
						"vertexSources",
						lv_vertexSources_0_0,
						"org.eclipse.january.geometry.xtext.OBJ.VertexSource");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getGeometryAccess().getNodesPolyShapeParserRuleCall_1_0());
				}
				lv_nodes_1_0=rulePolyShape
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGeometryRule());
					}
					add(
						$current,
						"nodes",
						lv_nodes_1_0,
						"org.eclipse.january.geometry.xtext.OBJ.PolyShape");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)*
;

// Entry rule entryRuleVertexSource
entryRuleVertexSource returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVertexSourceRule()); }
	iv_ruleVertexSource=ruleVertexSource
	{ $current=$iv_ruleVertexSource.current; }
	EOF;

// Rule VertexSource
ruleVertexSource returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVertexSourceAccess().getVertexSourceAction_0(),
					$current);
			}
		)
		(
			otherlv_1='mtllib'
			{
				newLeafNode(otherlv_1, grammarAccess.getVertexSourceAccess().getMtllibKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVertexSourceAccess().getMaterialFilesEStringParserRuleCall_1_1_0());
					}
					lv_materialFiles_2_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVertexSourceRule());
						}
						add(
							$current,
							"materialFiles",
							lv_materialFiles_2_0,
							"org.eclipse.january.geometry.xtext.OBJ.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_3='g'
			{
				newLeafNode(otherlv_3, grammarAccess.getVertexSourceAccess().getGKeyword_2_0());
			}
			(
				{
					newCompositeNode(grammarAccess.getVertexSourceAccess().getEStringParserRuleCall_2_1());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)?
		(
			(
				otherlv_5='v'
				{
					newLeafNode(otherlv_5, grammarAccess.getVertexSourceAccess().getVKeyword_3_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVertexSourceAccess().getVerticesVertexParserRuleCall_3_0_1_0());
						}
						lv_vertices_6_0=ruleVertex
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVertexSourceRule());
							}
							add(
								$current,
								"vertices",
								lv_vertices_6_0,
								"org.eclipse.january.geometry.xtext.OBJ.Vertex");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				otherlv_7='vt'
				{
					newLeafNode(otherlv_7, grammarAccess.getVertexSourceAccess().getVtKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVertexSourceAccess().getTextureCoordinatesTextureVertexParserRuleCall_3_1_1_0());
						}
						lv_textureCoordinates_8_0=ruleTextureVertex
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVertexSourceRule());
							}
							add(
								$current,
								"textureCoordinates",
								lv_textureCoordinates_8_0,
								"org.eclipse.january.geometry.xtext.OBJ.TextureVertex");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				otherlv_9='vn'
				{
					newLeafNode(otherlv_9, grammarAccess.getVertexSourceAccess().getVnKeyword_3_2_0());
				}
				{
					newCompositeNode(grammarAccess.getVertexSourceAccess().getEDoubleParserRuleCall_3_2_1());
				}
				ruleEDouble
				{
					afterParserOrEnumRuleCall();
				}
				{
					newCompositeNode(grammarAccess.getVertexSourceAccess().getEDoubleParserRuleCall_3_2_2());
				}
				ruleEDouble
				{
					afterParserOrEnumRuleCall();
				}
				{
					newCompositeNode(grammarAccess.getVertexSourceAccess().getEDoubleParserRuleCall_3_2_3());
				}
				ruleEDouble
				{
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRulePolyShape
entryRulePolyShape returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPolyShapeRule()); }
	iv_rulePolyShape=rulePolyShape
	{ $current=$iv_rulePolyShape.current; }
	EOF;

// Rule PolyShape
rulePolyShape returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPolyShapeAccess().getPolyShapeAction_0(),
					$current);
			}
		)
		(
			otherlv_1='mtllib'
			{
				newLeafNode(otherlv_1, grammarAccess.getPolyShapeAccess().getMtllibKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPolyShapeAccess().getMaterialFilesEStringParserRuleCall_1_1_0());
					}
					lv_materialFiles_2_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPolyShapeRule());
						}
						add(
							$current,
							"materialFiles",
							lv_materialFiles_2_0,
							"org.eclipse.january.geometry.xtext.OBJ.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_3='g'
			{
				newLeafNode(otherlv_3, grammarAccess.getPolyShapeAccess().getGKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPolyShapeAccess().getNameEStringParserRuleCall_2_1_0());
					}
					lv_name_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPolyShapeRule());
						}
						set(
							$current,
							"name",
							lv_name_4_0,
							"org.eclipse.january.geometry.xtext.OBJ.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)?
		(
			otherlv_5='usemtl'
			{
				newLeafNode(otherlv_5, grammarAccess.getPolyShapeAccess().getUsemtlKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPolyShapeAccess().getMaterialMaterialParserRuleCall_3_1_0());
					}
					lv_material_6_0=ruleMaterial
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPolyShapeRule());
						}
						set(
							$current,
							"material",
							lv_material_6_0,
							"org.eclipse.january.geometry.xtext.OBJ.Material");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				otherlv_7='f'
				{
					newLeafNode(otherlv_7, grammarAccess.getPolyShapeAccess().getFKeyword_4_0_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPolyShapeAccess().getFacesFaceParserRuleCall_4_0_1_0());
						}
						lv_faces_8_0=ruleFace
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPolyShapeRule());
							}
							add(
								$current,
								"faces",
								lv_faces_8_0,
								"org.eclipse.january.geometry.xtext.OBJ.Face");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				otherlv_9='s'
				{
					newLeafNode(otherlv_9, grammarAccess.getPolyShapeAccess().getSKeyword_4_1_0());
				}
				(
					{
						newCompositeNode(grammarAccess.getPolyShapeAccess().getEIntParserRuleCall_4_1_1_0());
					}
					ruleEInt
					{
						afterParserOrEnumRuleCall();
					}
					    |
					otherlv_11='off'
					{
						newLeafNode(otherlv_11, grammarAccess.getPolyShapeAccess().getOffKeyword_4_1_1_1());
					}
				)
			)
		)+
	)
;

// Entry rule entryRuleFace
entryRuleFace returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFaceRule()); }
	iv_ruleFace=ruleFace
	{ $current=$iv_ruleFace.current; }
	EOF;

// Rule Face
ruleFace returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFaceAccess().getFaceAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFaceAccess().getVertexIndicesEIntParserRuleCall_1_0_0());
					}
					lv_vertexIndices_1_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFaceRule());
						}
						add(
							$current,
							"vertexIndices",
							lv_vertexIndices_1_0,
							"org.eclipse.january.geometry.xtext.OBJ.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2='/'
				{
					newLeafNode(otherlv_2, grammarAccess.getFaceAccess().getSolidusKeyword_1_1_0());
				}
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getFaceAccess().getTextureIndicesEIntParserRuleCall_1_1_1_0_0());
							}
							lv_textureIndices_3_0=ruleEInt
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getFaceRule());
								}
								add(
									$current,
									"textureIndices",
									lv_textureIndices_3_0,
									"org.eclipse.january.geometry.xtext.OBJ.EInt");
								afterParserOrEnumRuleCall();
							}
						)
					)
					    |
					(
						(
							(
								{
									newCompositeNode(grammarAccess.getFaceAccess().getTextureIndicesEIntParserRuleCall_1_1_1_1_0_0());
								}
								lv_textureIndices_4_0=ruleEInt
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getFaceRule());
									}
									add(
										$current,
										"textureIndices",
										lv_textureIndices_4_0,
										"org.eclipse.january.geometry.xtext.OBJ.EInt");
									afterParserOrEnumRuleCall();
								}
							)
						)
						otherlv_5='/'
						{
							newLeafNode(otherlv_5, grammarAccess.getFaceAccess().getSolidusKeyword_1_1_1_1_1());
						}
						{
							newCompositeNode(grammarAccess.getFaceAccess().getEIntParserRuleCall_1_1_1_1_2());
						}
						ruleEInt
						{
							afterParserOrEnumRuleCall();
						}
					)
					    |
					(
						otherlv_7='/'
						{
							newLeafNode(otherlv_7, grammarAccess.getFaceAccess().getSolidusKeyword_1_1_1_2_0());
						}
						{
							newCompositeNode(grammarAccess.getFaceAccess().getEIntParserRuleCall_1_1_1_2_1());
						}
						ruleEInt
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)*
	)
;

// Entry rule entryRuleVertex
entryRuleVertex returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVertexRule()); }
	iv_ruleVertex=ruleVertex
	{ $current=$iv_ruleVertex.current; }
	EOF;

// Rule Vertex
ruleVertex returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVertexAccess().getVertexAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVertexAccess().getXEDoubleParserRuleCall_1_0());
				}
				lv_x_1_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVertexRule());
					}
					set(
						$current,
						"x",
						lv_x_1_0,
						"org.eclipse.january.geometry.xtext.OBJ.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVertexAccess().getYEDoubleParserRuleCall_2_0());
				}
				lv_y_2_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVertexRule());
					}
					set(
						$current,
						"y",
						lv_y_2_0,
						"org.eclipse.january.geometry.xtext.OBJ.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVertexAccess().getZEDoubleParserRuleCall_3_0());
				}
				lv_z_3_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVertexRule());
					}
					set(
						$current,
						"z",
						lv_z_3_0,
						"org.eclipse.january.geometry.xtext.OBJ.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTextureVertex
entryRuleTextureVertex returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTextureVertexRule()); }
	iv_ruleTextureVertex=ruleTextureVertex
	{ $current=$iv_ruleTextureVertex.current; }
	EOF;

// Rule TextureVertex
ruleTextureVertex returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTextureVertexAccess().getXEDoubleParserRuleCall_0_0());
				}
				lv_x_0_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTextureVertexRule());
					}
					set(
						$current,
						"x",
						lv_x_0_0,
						"org.eclipse.january.geometry.xtext.OBJ.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTextureVertexAccess().getYEDoubleParserRuleCall_1_0());
				}
				lv_y_1_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTextureVertexRule());
					}
					set(
						$current,
						"y",
						lv_y_1_0,
						"org.eclipse.january.geometry.xtext.OBJ.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTextureVertexAccess().getZEDoubleParserRuleCall_2_0());
				}
				lv_z_2_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTextureVertexRule());
					}
					set(
						$current,
						"z",
						lv_z_2_0,
						"org.eclipse.january.geometry.xtext.OBJ.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleMaterial
entryRuleMaterial returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMaterialRule()); }
	iv_ruleMaterial=ruleMaterial
	{ $current=$iv_ruleMaterial.current; }
	EOF;

// Rule Material
ruleMaterial returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMaterialAccess().getMaterialAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getMaterialAccess().getPhongMatNameEStringParserRuleCall_1_0());
				}
				lv_phongMatName_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMaterialRule());
					}
					set(
						$current,
						"phongMatName",
						lv_phongMatName_1_0,
						"org.eclipse.january.geometry.xtext.OBJ.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
		    |
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getEStringAccess().getINTTerminalRuleCall_2());
		}
		    |
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEStringAccess().getFullStopKeyword_3());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEStringAccess().getSolidusKeyword_4());
		}
		    |
		kw='\\'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEStringAccess().getReverseSolidusKeyword_5());
		}
		    |
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEStringAccess().getColonKeyword_6());
		}
		    |
		kw='_'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEStringAccess().get_Keyword_7());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEStringAccess().getHyphenMinusKeyword_8());
		}
	)+
;

// Entry rule entryRuleEDouble
entryRuleEDouble returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEDoubleRule()); }
	iv_ruleEDouble=ruleEDouble
	{ $current=$iv_ruleEDouble.current.getText(); }
	EOF;

// Rule EDouble
ruleEDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_DOUBLE_0=RULE_DOUBLE
		{
			$current.merge(this_DOUBLE_0);
		}
		{
			newLeafNode(this_DOUBLE_0, grammarAccess.getEDoubleAccess().getDOUBLETerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getEDoubleAccess().getEIntParserRuleCall_1());
		}
		this_EInt_1=ruleEInt
		{
			$current.merge(this_EInt_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_DOUBLE : ('-'|'+')? RULE_INT? '.' RULE_INT (('E'|'e') ('-'|'+')? RULE_INT)?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_ANY_OTHER : .;
